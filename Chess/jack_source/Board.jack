class Board {
    static int static_0;
    static int static_1;
    static int static_2;
    static int static_3;
    static int static_4;
    static int static_5;
    static int static_6;
    static int static_7;
    static int static_8;
    static int static_9;
    static int static_10;
    static int static_11;
    static int static_12;
    static int static_13;
    static int static_14;
    static int static_15;
    static int static_16;
    static int static_17;
    static int static_18;
    static int static_19;
    static int static_20;
    static int static_21;
    static int static_22;
    static int static_23;
    static int static_24;
    static int static_25;
    static int static_26;
    static int static_27;
    static int static_28;
    static int static_29;
    static int static_30;
    static int static_31;
    static int static_32;
    static int static_33;
    static int static_34;
    static int static_35;
    static int static_36;
    static int static_37;
    static int static_38;
    static int static_39;
    static int static_40;
    static int static_41;
    static int static_42;
    static int static_43;
    static int static_44;
    static int static_45;
    static int static_46;
    static int static_47;
    static int static_48;
    static int static_49;
    static int static_50;
    static int static_51;
    static int static_52;
    static int static_53;
    static int static_54;
    static int static_55;
    static int static_56;
    static int static_57;
    static int static_58;
    static int static_59;
    static int static_60;
    static int static_61;
    static int static_62;
    static int static_63;
    static int static_64;
    static int static_65;
    static int static_66;
    static int static_67;
    static int static_68;
    static int static_69;
    static int static_70;
    static int static_71;
    static int static_72;
    static int static_73;
    static int static_74;
    field int field_0;
    field Array field_1;
    field PieceList field_2;
    field PieceList field_3;
    field int field_4;
    field Board field_5;
    field MoveList field_6;
    function void init() {
        
        let static_0 = 136;
        let static_2 = 1;
        let static_3 = -(1);
        let static_4 = 1;
        let static_5 = 2;
        let static_6 = 5;
        let static_7 = 6;
        let static_8 = 7;
        let static_9 = 3;
        let static_10 = static_4 | 8;
        let static_11 = static_5 | 8;
        let static_12 = static_6 | 8;
        let static_13 = static_7 | 8;
        let static_14 = static_8 | 8;
        let static_15 = static_9 | 8;
        let static_1 = 4;
        let static_23 = 64;
        let static_24 = 32;
        let static_25 = 16;
        let static_26 = 8;
        let static_27 = 4;
        let static_28 = 2;
        let static_29 = 1;
        let static_16 = 0;
        let static_17 = ( static_23 | static_24 | static_25);
        let static_18 = static_24 | static_25;
        let static_19 = ( ( static_23 | static_24 | static_26) | static_29);
        let static_20 = ( ( static_23 | static_24 | static_26) | static_28);
        let static_21 = static_24 | static_26;
        let static_22 = static_27;
        let static_30 = Array.new(239);
        do Board.initAttackArray();
        let static_31 = Array.new(239);
        do Board.initAttackSliderSteps();
        let static_32 = Array.new(16);
        let static_4[static_32] = static_29;
        
        let static_5[static_32] = static_27;
        
        let static_6[static_32] = static_26;
        
        let static_7[static_32] = static_25;
        
        let static_8[static_32] = static_24;
        
        let static_9[static_32] = static_23;
        
        let static_10[static_32] = static_28;
        
        let static_11[static_32] = static_27;
        
        let static_12[static_32] = static_26;
        
        let static_13[static_32] = static_25;
        
        let static_14[static_32] = static_24;
        
        let static_15[static_32] = static_23;
        
        let static_33 = Array.new(120);
        let static_34 = Array.new(120);
        do Board.initSqEncoders();
        let static_35 = Array.new(64);
        do Board.initSqDecoder();
        let static_36 = 63;
        let static_37 = -(4096);
        let static_38 = 4096;
        let static_42 = 32767 + 1;
        let static_41 = -(28672);
        let static_40 = -(24576);
        let static_39 = -(20480);
        let static_43 = 20480;
        let static_44 = 16384;
        let static_45 = 8192;
        let static_46 = 12288;
        let static_47 = 1;
        let static_48 = 2;
        let static_49 = 4;
        let static_50 = 8;
        let static_52 = Array.new(9);
        let 0[static_52] = 14;
        
        let 1[static_52] = 31;
        
        let 2[static_52] = 33;
        
        let 3[static_52] = 18;
        
        let 4[static_52] = -(14);
        
        let 5[static_52] = -(31);
        
        let 6[static_52] = -(33);
        
        let 7[static_52] = -(18);
        
        let 8[static_52] = 0;
        
        let static_53 = Array.new(5);
        let 0[static_53] = 15;
        
        let 1[static_53] = 17;
        
        let 2[static_53] = -(15);
        
        let 3[static_53] = -(17);
        
        let 4[static_53] = 0;
        
        let static_54 = Array.new(5);
        let 0[static_54] = 1;
        
        let 1[static_54] = 16;
        
        let 2[static_54] = -(1);
        
        let 3[static_54] = -(16);
        
        let 4[static_54] = 0;
        
        let static_55 = Array.new(9);
        let 0[static_55] = 15;
        
        let 1[static_55] = 17;
        
        let 2[static_55] = -(15);
        
        let 3[static_55] = -(17);
        
        let 4[static_55] = 1;
        
        let 5[static_55] = 16;
        
        let 6[static_55] = -(1);
        
        let 7[static_55] = -(16);
        
        let 8[static_55] = 0;
        
        let static_51 = Array.new(8);
        let static_5[static_51] = static_52;
        
        let static_6[static_51] = static_53;
        
        let static_7[static_51] = static_54;
        
        let static_8[static_51] = static_55;
        
        let static_9[static_51] = static_55;
        
        let static_56 = 2048;
        let static_57 = 8192;
        let static_58 = Array.new(8);
        let static_5[static_58] = 1;
        
        let static_6[static_58] = 2;
        
        let static_7[static_58] = 3;
        
        let static_8[static_58] = 4;
        
        let static_9[static_58] = 5;
        
        let static_59 = Array.new(8);
        let static_4[static_59] = 100;
        
        let static_5[static_59] = 320;
        
        let static_6[static_59] = 320;
        
        let static_7[static_59] = 550;
        
        let static_8[static_59] = 950;
        
        let static_9[static_59] = 1024;
        
        let static_61 = Array.new(120);
        do Board.initwPawnPieceSquareTable();
        let static_62 = Array.new(120);
        do Board.initbPawnPieceSquareTable();
        let static_63 = Array.new(120);
        do Board.initwKnightPieceSquareTable();
        let static_64 = Array.new(120);
        do Board.initbKnightPieceSquareTable();
        let static_65 = Array.new(120);
        do Board.initwBishopPieceSquareTable();
        let static_66 = Array.new(120);
        do Board.initbBishopPieceSquareTable();
        let static_67 = Array.new(120);
        do Board.initwRookPieceSquareTable();
        let static_68 = Array.new(120);
        do Board.initbRookPieceSquareTable();
        let static_69 = Array.new(120);
        do Board.initwQueenPieceSquareTable();
        let static_70 = Array.new(120);
        do Board.initbQueenPieceSquareTable();
        let static_71 = Array.new(120);
        do Board.initwKingPieceSquareTable();
        let static_72 = Array.new(120);
        do Board.initbKingPieceSquareTable();
        let static_60 = Array.new(16);
        let static_4[static_60] = static_61;
        
        let static_5[static_60] = static_63;
        
        let static_6[static_60] = static_65;
        
        let static_7[static_60] = static_67;
        
        let static_8[static_60] = static_69;
        
        let static_9[static_60] = 0;
        
        let static_10[static_60] = static_62;
        
        let static_11[static_60] = static_64;
        
        let static_12[static_60] = static_66;
        
        let static_13[static_60] = static_68;
        
        let static_14[static_60] = static_70;
        
        let static_15[static_60] = 0;
        
        let static_73 = Array.new(120);
        do Board.initwKingEndPieceSquareTable();
        let static_74 = Array.new(120);
        do Board.initbKingEndPieceSquareTable();
        return;
    }

    function void final() {
        
        do static_30.dispose();
        do static_31.dispose();
        do static_32.dispose();
        do static_33.dispose();
        do static_34.dispose();
        do static_35.dispose();
        do static_51.dispose();
        do static_52.dispose();
        do static_53.dispose();
        do static_54.dispose();
        do static_55.dispose();
        do static_58.dispose();
        do static_59.dispose();
        do static_60.dispose();
        do static_61.dispose();
        do static_62.dispose();
        do static_63.dispose();
        do static_64.dispose();
        do static_65.dispose();
        do static_66.dispose();
        do static_67.dispose();
        do static_68.dispose();
        do static_69.dispose();
        do static_70.dispose();
        do static_71.dispose();
        do static_72.dispose();
        do static_73.dispose();
        do static_74.dispose();
        return;
    }

    constructor Board new(int argument_0) {
        var int local_0;
        let field_1 = Array.new(128);
        let field_2 = PieceList.new();
        let field_3 = PieceList.new();
        do initBoard(argument_0);
        let field_6 = MoveList.new(300, 0);
        return this;
    }

    method void dispose() {
        do field_1.dispose();
        do field_2.dispose();
        do field_3.dispose();
        do field_6.dispose();
        do Memory.deAlloc(this);
        return;
    }

    function int matValue(int argument_0) {
        
        return argument_0[static_59];
    }

    function int decodeFromSq(int argument_0) {
        var int local_0;
        var int local_1;
        var int local_2;
        
        let local_0 = 64;
        let local_1 = 1;
        while (~(local_0 = 4096)) {
        	if (( argument_0 & local_0 = local_0)) {
        		let local_2 = local_2 | local_1;
        	}
        	let local_0 = local_0 + local_0;
        	let local_1 = local_1 + local_1;
        }
        return local_2;
    }

    method void clearMoveHistory() {
        do field_6.resetCount();
        return;
    }

    method int getMoveHistory() {
        return field_6;
    }

    method int getwPieceList() {
        return field_2;
    }

    method int getbPieceList() {
        return field_3;
    }

    method int isStandardConfig() {
        return field_0;
    }

    method int convertUIMoveStrToMove(int argument_0, String argument_1) {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        var int local_5;
        var int local_6;
        var int local_7;
        var int local_8;
        var int local_9;
        var int local_10;
        var int local_11;
        let local_11 = 0;
        let local_4 = argument_2.getCount();
        let local_9 = argument_2.getMoves();
        let local_0 = ( argument_1.charAt(0) - 65);
        let local_1 = ( argument_1.charAt(1) - 49);
        let local_5 = ( Math.multiply(8, local_1) + local_0);
        let local_0 = ( argument_1.charAt(2) - 65);
        let local_1 = ( argument_1.charAt(3) - 49);
        let local_6 = ( Math.multiply(8, local_1) + local_0);
        let local_7 = ( Math.multiply(local_5, 64) | local_6);
        while (local_2 < local_4) {
        	let local_3 = local_2[local_9];
        	if (( local_3 & 4095 = local_7)) {
        		if (( local_3 & static_42 = static_42)) {
        			do Output.println();
        			do Output.printString(Game.getPromoteStr());
        			while (~(local_11)) {
        				let local_10 = Keyboard.readChar();
        				if (local_10 = 81) {
        					let local_8 = static_39;
        // Unhandled VM instruction: GotoInstruction{label='IF_END2}
        				}
        				if (local_10 = 82) {
        					let local_8 = static_40;
        // Unhandled VM instruction: GotoInstruction{label='IF_END3}
        				}
        				if (local_10 = 66) {
        					let local_8 = static_41;
        // Unhandled VM instruction: GotoInstruction{label='IF_END4}
        				}
        				if (local_10 = 78) {
        					let local_8 = static_42;
        // Unhandled VM instruction: GotoInstruction{label='IF_END5}
        				}
        				do Output.backSpace();
        				let local_11 = ~(local_8 = 0);
        			}
        			do Output.println();
        			if (( local_3 & static_44 = static_44)) {
        				let local_8 = local_8 | static_44;
        			}
        			while (~(0)) {
        				if (( local_8 | local_7 = local_3)) {
        					return local_3;
        				}
        				let local_2 = local_2 + 1;
        				let local_3 = local_2[local_9];
        			}
        // Unhandled VM instruction: GotoInstruction{label='IF_END1}
        		}
        		return local_3;
        	}
        	let local_2 = local_2 + 1;
        }
        return 0;
    }

    function int convertMoveToUIMoveStr(int argument_0, int argument_1) {
        var int local_0;
        var int local_1;
        var String local_2;
        var String local_3;
        var String local_4;
        var String local_5;
        
        let local_0 = Board.decodeFromSq(argument_0);
        let local_1 = argument_0 & static_36;
        let local_3 = local_0 & 7;
        let local_2 = Math.divide(local_0, 8);
        let local_5 = local_1 & 7;
        let local_4 = Math.divide(local_1, 8);
        do argument_1.setCharAt(0, local_3 + 65);
        do argument_1.setCharAt(1, local_2 + 49);
        do argument_1.setCharAt(2, local_5 + 65);
        do argument_1.setCharAt(3, local_4 + 49);
        return argument_1;
    }

    method int getTurn() {
        return field_5;
    }

    method int matIsLow(int argument_0) {
        if (field_5 = static_2) {
        	return ( argument_1.getwMaterial() < 1575);
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        return ( argument_1.getbMaterial() < 1575);
    }

    method void initBoard(int argument_0) {
        var int local_0;
        var BoardState local_1;
        while (local_0 < 128) {
        	let local_0[field_1] = 0;
        	
        	let local_0 = local_0 + 1;
        }
        do field_2.resetCount();
        do field_3.resetCount();
        let field_4 = argument_1;
        let local_1 = 0[field_4];
        do local_1.resetState();
        do standardBoardConfig();
        let field_0 = ~(0);
        do local_1.resetMaterial(field_2, field_3);
        return;
    }

    method void standardBoardConfig() {
        var int local_0;
        let 0[field_1] = field_2.addPiece(static_7, 0);
        
        let 1[field_1] = field_2.addPiece(static_5, 1);
        
        let 2[field_1] = field_2.addPiece(static_6, 2);
        
        let 3[field_1] = field_2.addPiece(static_8, 3);
        
        let 5[field_1] = field_2.addPiece(static_6, 5);
        
        let 6[field_1] = field_2.addPiece(static_5, 6);
        
        let 7[field_1] = field_2.addPiece(static_7, 7);
        
        let local_0 = 16;
        while (local_0 < 24) {
        	let local_0[field_1] = field_2.addPiece(static_4, local_0);
        	
        	let local_0 = local_0 + 1;
        }
        let 4[field_1] = field_2.addPiece(static_9, 4);
        
        let 112[field_1] = field_3.addPiece(static_13, 112);
        
        let 113[field_1] = field_3.addPiece(static_11, 113);
        
        let 114[field_1] = field_3.addPiece(static_12, 114);
        
        let 115[field_1] = field_3.addPiece(static_14, 115);
        
        let 117[field_1] = field_3.addPiece(static_12, 117);
        
        let 118[field_1] = field_3.addPiece(static_11, 118);
        
        let 119[field_1] = field_3.addPiece(static_13, 119);
        
        let local_0 = 96;
        while (local_0 < 104) {
        	let local_0[field_1] = field_3.addPiece(static_10, local_0);
        	
        	let local_0 = local_0 + 1;
        }
        let 116[field_1] = field_3.addPiece(static_15, 116);
        
        let field_5 = static_2;
        return;
    }

    method void fixBoardState() {
        var int local_0;
        var BoardState local_1;
        let field_4 = field_4 - 1;
        let local_0 = 0[field_4];
        let local_1 = 1[field_4];
        do local_0.setState(local_1.getFiftyMoveCount(), local_1.getEnPassantSq(), local_1.getCastlingRights(), local_1.getCapturedPiece(), local_1.getwMaterial(), local_1.getbMaterial(), 0);
        do local_0.setSideToMoveInCheck(inCheck(field_5));
        return;
    }

    method int inCheck(int argument_0) {
        if (argument_1 = static_2) {
        	return isAttacked(field_2.getKingSquare(), -(argument_1));
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        return isAttacked(field_3.getKingSquare(), -(argument_1));
    }

    method int isAttacked(int argument_0, int argument_1) {
        var int local_0;
        var Piece local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        var int local_5;
        var int local_6;
        var int local_7;
        if (argument_2 = static_2) {
        	let local_0 = field_2.getPieces();
        	let local_3 = field_2.getCount();
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        let local_0 = field_3.getPieces();
        let local_3 = field_3.getCount();
        while (local_2 < local_3) {
        	let local_1 = local_2[local_0];
        	if (~(local_1.isDead())) {
        		let local_6 = local_1.getSquare();
        		let local_4 = ( argument_1 - local_6 + 119);
        		let local_5 = local_1.getValue();
        		if (~(( ( local_4[static_30] & local_5[static_32]) = 0))) {
        			if (( local_5 & static_1 = 0)) {
        				return ~(0);
        // Unhandled VM instruction: GotoInstruction{label='IF_END3}
        			}
        			let local_7 = 0;
        			while (~(local_7)) {
        				let local_6 = ( local_6 + local_4[static_31]);
        				if (local_6 = argument_1) {
        					return ~(0);
        				}
        				if (~(( local_6[field_1] = 0))) {
        					let local_7 = ~(0);
        				}
        			}
        		}
        	}
        	let local_2 = local_2 + 1;
        }
        return 0;
    }

    method int eval(int argument_0, int argument_1) {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        var int local_5;
        var BoardState local_6;
        var int local_7;
        var int local_8;
        var Piece local_9;
        let local_6 = 0[field_4];
        let local_4 = local_6.getwMaterial();
        let local_5 = local_6.getbMaterial();
        let local_3 = local_4 - local_5;
        if (field_5 = static_3) {
        	let local_3 = -(local_3);
        }
        if (( local_3 - 300 > argument_2)) {
        	return argument_2;
        }
        if (( local_3 + 300 < argument_1)) {
        	return argument_1;
        }
        let local_7 = field_2.getPieces();
        let local_1 = field_2.getCount();
        while (local_0 < local_1) {
        	let local_9 = local_0[local_7];
        	if (~(local_9.isDead())) {
        		let local_2 = local_9.getValue();
        		if (local_2 = static_9) {
        			if (local_5 < 2445) {
        				let local_8 = static_73;
        // Unhandled VM instruction: GotoInstruction{label='IF_END5}
        			}
        			let local_8 = static_71;
        // Unhandled VM instruction: GotoInstruction{label='IF_END4}
        		}
        		let local_8 = local_2[static_60];
        		let local_4 = ( local_4 + local_9.getSquare()[local_8]);
        	}
        	let local_0 = local_0 + 1;
        }
        let local_7 = field_3.getPieces();
        let local_1 = field_3.getCount();
        let local_0 = 0;
        while (local_0 < local_1) {
        	let local_9 = local_0[local_7];
        	if (~(local_9.isDead())) {
        		let local_2 = local_9.getValue();
        		if (local_2 = static_15) {
        			if (( local_6.getwMaterial() < 2445)) {
        				let local_8 = static_74;
        // Unhandled VM instruction: GotoInstruction{label='IF_END8}
        			}
        			let local_8 = static_72;
        // Unhandled VM instruction: GotoInstruction{label='IF_END7}
        		}
        		let local_8 = local_2[static_60];
        		let local_5 = ( local_5 + local_9.getSquare()[local_8]);
        	}
        	let local_0 = local_0 + 1;
        }
        let local_3 = local_4 - local_5;
        if (field_5 = static_3) {
        	return -(local_3);
        }
        return local_3;
    }

    method void doRealMove(int argument_0) {
        do doMove(argument_1);
        do fixBoardState();
        if (( argument_1 & static_44 = static_44)) {
        	if (field_5 = static_2) {
        		do field_2.compress();
        // Unhandled VM instruction: GotoInstruction{label='IF_END1}
        	}
        	do field_3.compress();
        }
        return;
    }

    method int drawByRep2() {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        var int local_5;
        var int local_6;
        let local_0 = field_6.getMoves();
        let local_2 = field_6.getCount();
        if (local_2 < 5) {
        	return 0;
        }
        let local_3 = local_2 - 1[local_0];
        if (( local_3 & static_37 = 0)) {
        	let local_5 = Board.decodeFromSq(local_3);
        	let local_6 = local_3 & static_36;
        	let local_4 = local_2 - 3[local_0];
        	if (( local_4 & static_37 = 0)) {
        		if (( ( ( local_6 = ( local_2 - 5[local_0] & static_36)) & ( local_6 = Board.decodeFromSq(local_4))) & ( local_5 = local_4 & static_36))) {
        			let local_3 = local_2 - 2[local_0];
        			if (( local_3 & static_37 = 0)) {
        				let local_5 = Board.decodeFromSq(local_3);
        				let local_6 = local_3 & static_36;
        				let local_4 = local_2 - 4[local_0];
        				if (( local_4 & static_37 = 0)) {
        					if (( ( local_6 = Board.decodeFromSq(local_4)) & ( local_5 = local_4 & static_36))) {
        						return ~(0);
        					}
        				}
        			}
        		}
        	}
        }
        return 0;
    }

    method int drawByRep3() {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        var int local_5;
        var int local_6;
        let local_0 = field_6.getMoves();
        let local_2 = field_6.getCount();
        if (local_2 < 9) {
        	return 0;
        }
        let local_3 = local_2 - 1[local_0];
        if (( local_3 & static_37 = 0)) {
        	let local_5 = Board.decodeFromSq(local_3);
        	let local_6 = local_3 & static_36;
        	let local_4 = local_2 - 3[local_0];
        	if (( local_4 & static_37 = 0)) {
        		if (( ( ( local_6 = ( local_2 - 9[local_0] & static_36)) & ( local_6 = Board.decodeFromSq(local_4))) & ( local_5 = local_4 & static_36))) {
        			let local_3 = local_2 - 2[local_0];
        			if (( local_3 & static_37 = 0)) {
        				let local_5 = Board.decodeFromSq(local_3);
        				let local_6 = local_3 & static_36;
        				let local_4 = local_2 - 4[local_0];
        				if (( local_4 & static_37 = 0)) {
        					if (( ( local_6 = Board.decodeFromSq(local_4)) & ( local_5 = local_4 & static_36))) {
        						if (( local_2 - 5[local_0] = local_2 - 1[local_0])) {
        							if (( local_2 - 7[local_0] = local_2 - 3[local_0])) {
        								if (( local_2 - 6[local_0] = local_2 - 2[local_0])) {
        									if (( local_2 - 8[local_0] = local_2 - 4[local_0])) {
        										return ~(0);
        									}
        								}
        							}
        						}
        					}
        				}
        			}
        		}
        	}
        }
        return 0;
    }

    method int moveCapturesKing(int argument_0) {
        var Piece local_0;
        let local_0 = argument_1 & static_36[static_35][field_1];
        if (local_0 = 0) {
        	return 0;
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        return ( ( local_0.getValue() & 7) = static_9);
    }

    method void doMove(int argument_0) {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        var int local_5;
        var int local_6;
        var Piece local_7;
        var Piece local_8;
        var Piece local_9;
        var int local_10;
        var int local_11;
        var int local_12;
        var int local_13;
        var int local_14;
        var BoardState local_15;
        var BoardState local_16;
        do field_6.addMoveIgnoreRank(argument_1);
        let local_0 = Board.decodeFromSq(argument_1)[static_35];
        let local_1 = argument_1 & static_36[static_35];
        let local_7 = local_0[field_1];
        let local_3 = local_7.getValue();
        let local_15 = 0[field_4];
        let local_16 = 1[field_4];
        let local_11 = -(1);
        let local_12 = local_15.getCastlingRights();
        let local_13 = local_15.getwMaterial();
        let local_14 = local_15.getbMaterial();
        if (( argument_1 & static_44 = static_44)) {
        	let local_10 = 0;
        	if (( argument_1 & static_37 = static_43)) {
        		if (field_5 = static_2) {
        			let local_2 = local_1 - 16;
        // Unhandled VM instruction: GotoInstruction{label='IF_END2}
        		}
        		let local_2 = local_1 + 16;
        		let local_8 = local_2[field_1];
        		let local_2[field_1] = 0;
        		
        		let local_4 = local_8.getValue();
        // Unhandled VM instruction: GotoInstruction{label='IF_END1}
        	}
        	let local_8 = local_1[field_1];
        	let local_4 = local_8.getValue();
        	if (( local_4 & 7 = static_7)) {
        		if (field_5 = static_3) {
        			if (local_1 = 7) {
        				let local_12 = local_12 & 14;
        // Unhandled VM instruction: GotoInstruction{label='IF_END5}
        			}
        			if (local_1 = 0) {
        				let local_12 = local_12 & 13;
        			}
        // Unhandled VM instruction: GotoInstruction{label='IF_END4}
        		}
        		if (local_1 = 119) {
        			let local_12 = local_12 & 11;
        // Unhandled VM instruction: GotoInstruction{label='IF_END7}
        		}
        		if (local_1 = 112) {
        			let local_12 = local_12 & 7;
        		}
        	}
        	do local_8.setDead(~(0));
        	if (field_5 = static_2) {
        		let local_14 = ( local_14 - local_4 & 7[static_59]);
        // Unhandled VM instruction: GotoInstruction{label='IF_END9}
        	}
        	let local_13 = ( local_13 - local_4[static_59]);
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        let local_8 = 0;
        if (( local_3 & 7 = static_4)) {
        	let local_10 = 0;
        	if (( argument_1 & static_37 = static_38)) {
        		if (field_5 = static_2) {
        			let local_11 = local_1 - 16;
        // Unhandled VM instruction: GotoInstruction{label='IF_END12}
        		}
        		let local_11 = local_1 + 16;
        	}
        // Unhandled VM instruction: GotoInstruction{label='IF_END10}
        }
        let local_10 = ( local_15.getFiftyMoveCount() + 1);
        if (( local_3 & 7 = static_9)) {
        	if (field_5 = static_2) {
        		let local_12 = local_12 & 12;
        // Unhandled VM instruction: GotoInstruction{label='IF_END14}
        	}
        	let local_12 = local_12 & 3;
        	if (( argument_1 & static_37 = static_45)) {
        		let local_5 = local_0 + 3;
        		let local_6 = local_0 + 1;
        		let local_9 = local_5[field_1];
        		let local_6[field_1] = local_9;
        		
        		let local_5[field_1] = 0;
        		
        		do local_9.setSquare(local_6);
        // Unhandled VM instruction: GotoInstruction{label='IF_END15}
        	}
        	if (( argument_1 & static_37 = static_46)) {
        		let local_5 = local_0 - 4;
        		let local_6 = local_0 - 1;
        		let local_9 = local_5[field_1];
        		let local_6[field_1] = local_9;
        		
        		let local_5[field_1] = 0;
        		
        		do local_9.setSquare(local_6);
        	}
        // Unhandled VM instruction: GotoInstruction{label='IF_END13}
        }
        if (( local_3 & 7 = static_7)) {
        	if (field_5 = static_2) {
        		if (local_0 = 7) {
        			let local_12 = local_12 & 14;
        // Unhandled VM instruction: GotoInstruction{label='IF_END19}
        		}
        		if (local_0 = 0) {
        			let local_12 = local_12 & 13;
        		}
        // Unhandled VM instruction: GotoInstruction{label='IF_END18}
        	}
        	if (local_0 = 119) {
        		let local_12 = local_12 & 11;
        // Unhandled VM instruction: GotoInstruction{label='IF_END21}
        	}
        	if (local_0 = 112) {
        		let local_12 = local_12 & 7;
        	}
        // Unhandled VM instruction: GotoInstruction{label='IF_END17}
        }
        if (( argument_1 & static_42 = static_42)) {
        	if (( argument_1 & static_39 = static_39)) {
        		if (field_5 = static_2) {
        			do local_7.setValue(static_8);
        // Unhandled VM instruction: GotoInstruction{label='IF_END25}
        		}
        		do local_7.setValue(static_14);
        // Unhandled VM instruction: GotoInstruction{label='IF_END24}
        	}
        	if (( argument_1 & static_40 = static_40)) {
        		if (field_5 = static_2) {
        			do local_7.setValue(static_7);
        // Unhandled VM instruction: GotoInstruction{label='IF_END27}
        		}
        		do local_7.setValue(static_13);
        // Unhandled VM instruction: GotoInstruction{label='IF_END26}
        	}
        	if (( argument_1 & static_41 = static_41)) {
        		if (field_5 = static_2) {
        			do local_7.setValue(static_6);
        // Unhandled VM instruction: GotoInstruction{label='IF_END29}
        		}
        		do local_7.setValue(static_12);
        // Unhandled VM instruction: GotoInstruction{label='IF_END28}
        	}
        	if (field_5 = static_2) {
        		do local_7.setValue(static_5);
        // Unhandled VM instruction: GotoInstruction{label='IF_END30}
        	}
        	do local_7.setValue(static_11);
        	if (field_5 = static_2) {
        		let local_13 = ( ( local_13 + local_7.getValue()[static_59]) - static_4[static_59]);
        // Unhandled VM instruction: GotoInstruction{label='IF_END31}
        	}
        	let local_14 = ( ( local_14 + ( local_7.getValue() & 7)[static_59]) - static_4[static_59]);
        }
        let local_1[field_1] = local_7;
        
        let local_0[field_1] = 0;
        
        do local_7.setSquare(local_1);
        do local_16.setState(local_10, local_11, local_12, local_8, local_13, local_14, 0);
        let field_4 = field_4 + 1;
        let field_5 = -(field_5);
        return;
    }

    method void doQMove(int argument_0) {
        var int local_0;
        var int local_1;
        var int local_2;
        var Piece local_3;
        var Piece local_4;
        var int local_5;
        var int local_6;
        var BoardState local_7;
        var int local_8;
        let local_0 = Board.decodeFromSq(argument_1)[static_35];
        let local_1 = argument_1 & static_36[static_35];
        let local_3 = local_0[field_1];
        let local_7 = 0[field_4];
        let local_8 = 1[field_4];
        let local_5 = local_7.getwMaterial();
        let local_6 = local_7.getbMaterial();
        if (( argument_1 & static_37 = static_43)) {
        	if (field_5 = static_2) {
        		let local_2 = local_1 - 16;
        // Unhandled VM instruction: GotoInstruction{label='IF_END1}
        	}
        	let local_2 = local_1 + 16;
        	let local_4 = local_2[field_1];
        	let local_2[field_1] = 0;
        	
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        let local_4 = local_1[field_1];
        do local_4.setDead(~(0));
        if (field_5 = static_2) {
        	let local_6 = ( local_6 - ( local_4.getValue() & 7)[static_59]);
        // Unhandled VM instruction: GotoInstruction{label='IF_END2}
        }
        let local_5 = ( local_5 - local_4.getValue()[static_59]);
        if (( argument_1 & static_42 = static_42)) {
        	if (( argument_1 & static_39 = static_39)) {
        		if (field_5 = static_2) {
        			do local_3.setValue(static_8);
        // Unhandled VM instruction: GotoInstruction{label='IF_END5}
        		}
        		do local_3.setValue(static_14);
        // Unhandled VM instruction: GotoInstruction{label='IF_END4}
        	}
        	if (( argument_1 & static_40 = static_40)) {
        		if (field_5 = static_2) {
        			do local_3.setValue(static_7);
        // Unhandled VM instruction: GotoInstruction{label='IF_END7}
        		}
        		do local_3.setValue(static_13);
        // Unhandled VM instruction: GotoInstruction{label='IF_END6}
        	}
        	if (( argument_1 & static_41 = static_41)) {
        		if (field_5 = static_2) {
        			do local_3.setValue(static_6);
        // Unhandled VM instruction: GotoInstruction{label='IF_END9}
        		}
        		do local_3.setValue(static_12);
        // Unhandled VM instruction: GotoInstruction{label='IF_END8}
        	}
        	if (field_5 = static_2) {
        		do local_3.setValue(static_5);
        // Unhandled VM instruction: GotoInstruction{label='IF_END10}
        	}
        	do local_3.setValue(static_11);
        	if (field_5 = static_2) {
        		let local_5 = ( ( local_5 + local_3.getValue()[static_59]) - static_4[static_59]);
        // Unhandled VM instruction: GotoInstruction{label='IF_END11}
        	}
        	let local_6 = ( ( local_6 + ( local_3.getValue() & 7)[static_59]) - static_4[static_59]);
        }
        let local_1[field_1] = local_3;
        
        let local_0[field_1] = 0;
        
        do local_3.setSquare(local_1);
        do local_8.setState(0, -(1), 0, local_4, local_5, local_6, 0);
        let field_4 = field_4 + 1;
        let field_5 = -(field_5);
        return;
    }

    method void undoMove(int argument_0) {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        var Piece local_5;
        var Piece local_6;
        var Piece local_7;
        var BoardState local_8;
        do field_6.removeMove();
        let local_0 = Board.decodeFromSq(argument_1)[static_35];
        let local_1 = argument_1 & static_36[static_35];
        let field_5 = -(field_5);
        let local_5 = local_1[field_1];
        do local_5.setSquare(local_0);
        if (( argument_1 & static_42 = static_42)) {
        	if (field_5 = static_2) {
        		do local_5.setValue(static_4);
        // Unhandled VM instruction: GotoInstruction{label='IF_END1}
        	}
        	do local_5.setValue(static_10);
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        if (( argument_1 & static_37 = static_45)) {
        	let local_3 = local_0 + 3;
        	let local_4 = local_0 + 1;
        	let local_7 = local_4[field_1];
        	let local_3[field_1] = local_7;
        	
        	let local_4[field_1] = 0;
        	
        	do local_7.setSquare(local_3);
        // Unhandled VM instruction: GotoInstruction{label='IF_END2}
        }
        if (( argument_1 & static_37 = static_46)) {
        	let local_3 = local_0 - 4;
        	let local_4 = local_0 - 1;
        	let local_7 = local_4[field_1];
        	let local_3[field_1] = local_7;
        	
        	let local_4[field_1] = 0;
        	
        	do local_7.setSquare(local_3);
        }
        let local_0[field_1] = local_5;
        
        if (( argument_1 & static_44 = static_44)) {
        	let local_8 = 0[field_4];
        	let local_6 = local_8.getCapturedPiece();
        	let local_2 = local_6.getSquare();
        	do local_6.setDead(0);
        	let local_2[field_1] = local_6;
        	
        	if (( argument_1 & static_37 = static_43)) {
        		let local_1[field_1] = 0;
        		
        	}
        // Unhandled VM instruction: GotoInstruction{label='IF_END4}
        }
        let local_1[field_1] = 0;
        
        let field_4 = field_4 - 1;
        return;
    }

    method void undoQMove(int argument_0) {
        var int local_0;
        var int local_1;
        var int local_2;
        var Piece local_3;
        var Piece local_4;
        var BoardState local_5;
        let local_0 = Board.decodeFromSq(argument_1)[static_35];
        let local_1 = argument_1 & static_36[static_35];
        let field_5 = -(field_5);
        let local_3 = local_1[field_1];
        do local_3.setSquare(local_0);
        if (( argument_1 & static_42 = static_42)) {
        	if (field_5 = static_2) {
        		do local_3.setValue(static_4);
        // Unhandled VM instruction: GotoInstruction{label='IF_END1}
        	}
        	do local_3.setValue(static_10);
        }
        let local_0[field_1] = local_3;
        
        let local_5 = 0[field_4];
        let local_4 = local_5.getCapturedPiece();
        let local_2 = local_4.getSquare();
        do local_4.setDead(0);
        let local_2[field_1] = local_4;
        
        if (( argument_1 & static_37 = static_43)) {
        	let local_1[field_1] = 0;
        	
        }
        let field_4 = field_4 - 1;
        return;
    }

    method void doNullMove() {
        var BoardState local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        var int local_5;
        let local_0 = 0[field_4];
        let local_1 = 1[field_4];
        let local_3 = local_0.getCastlingRights();
        let local_4 = local_0.getwMaterial();
        let local_5 = local_0.getbMaterial();
        let local_2 = ( local_0.getFiftyMoveCount() + 1);
        do local_1.setState(local_2, -(1), local_3, 0, local_4, local_5, ~(0));
        let field_4 = field_4 + 1;
        let field_5 = -(field_5);
        return;
    }

    method void undoNullMove() {
        let field_5 = -(field_5);
        let field_4 = field_4 - 1;
        return;
    }

    method void genLegalMoves(int argument_0) {
        var MoveList local_0;
        var MoveList local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        var int local_5;
        let local_0 = 0[argument_1];
        do local_0.resetCount();
        let local_1 = 1[argument_1];
        do genPseudoLegalMoves(local_1);
        let local_2 = local_1.getMoves();
        let local_5 = local_1.getCount();
        while (local_3 < local_5) {
        	let local_4 = local_3[local_2];
        	do doMove(local_4);
        	if (~(inCheck(-(field_5)))) {
        		do local_0.addMoveIgnoreRank(local_4);
        	}
        	do undoMove(local_4);
        	let local_3 = local_3 + 1;
        }
        return;
    }

    method void genPseudoLegalQMoves(int argument_0) {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var Piece local_4;
        var Piece local_5;
        var MoveList local_6;
        var int local_7;
        var int local_8;
        var int local_9;
        var int local_10;
        var int local_11;
        var int local_12;
        var int local_13;
        var int local_14;
        var int local_15;
        var int local_16;
        var int local_17;
        var int local_18;
        var BoardState local_19;
        let local_19 = 0[field_4];
        let local_18 = local_19.getEnPassantSq();
        if (field_5 = static_2) {
        	let local_2 = field_2.getPieces();
        	let local_9 = field_2.getCount();
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        let local_2 = field_3.getPieces();
        let local_9 = field_3.getCount();
        do argument_1.resetCount();
        while (local_7 < local_9) {
        	let local_4 = local_7[local_2];
        	if (~(local_4.isDead())) {
        		let local_0 = local_4.getSquare();
        		let local_10 = local_4.getValue();
        		let local_3 = local_10 & 7[static_51];
        		if (( local_10 & 7 = static_4)) {
        			if (field_5 = static_2) {
        				let local_11 = local_0 + 15;
        				let local_12 = local_0 + 17;
        				let local_15 = local_0 > 87;
        // Unhandled VM instruction: GotoInstruction{label='IF_END3}
        			}
        			let local_11 = local_0 - 15;
        			let local_12 = local_0 - 17;
        			let local_15 = local_0 < 32;
        			if (( local_11 & static_0 = 0)) {
        				let local_5 = local_11[field_1];
        				if (local_5 = 0) {
        					if (local_11 = local_18) {
        						do argument_1.addMove(( ( static_43 | local_0[static_33]) | local_11[static_34]), ( static_57 | static_4[static_59]));
        					}
        // Unhandled VM instruction: GotoInstruction{label='IF_END5}
        				}
        				let local_13 = local_5.getValue();
        				if (field_5 = static_2) {
        					let local_16 = local_13 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END7}
        				}
        				let local_16 = local_13 < 8;
        				if (local_16) {
        					let local_6 = ( ( static_44 | local_0[static_33]) | local_11[static_34]);
        					let local_14 = ( static_57 | local_13 & 7[static_59]);
        					if (local_15) {
        						do argument_1.addMove(static_39 | local_6, local_14);
        						do argument_1.addMove(static_40 | local_6, local_14);
        						do argument_1.addMove(static_41 | local_6, local_14);
        						do argument_1.addMove(static_42 | local_6, local_14);
        // Unhandled VM instruction: GotoInstruction{label='IF_END9}
        					}
        					do argument_1.addMove(local_6, local_14);
        				}
        			}
        			if (( local_12 & static_0 = 0)) {
        				let local_5 = local_12[field_1];
        				if (local_5 = 0) {
        					if (local_12 = local_18) {
        						do argument_1.addMove(( ( static_43 | local_0[static_33]) | local_12[static_34]), ( static_57 | static_4[static_59]));
        					}
        // Unhandled VM instruction: GotoInstruction{label='IF_END11}
        				}
        				let local_13 = local_5.getValue();
        				if (field_5 = static_2) {
        					let local_16 = local_13 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END13}
        				}
        				let local_16 = local_13 < 8;
        				if (local_16) {
        					let local_6 = ( ( static_44 | local_0[static_33]) | local_12[static_34]);
        					let local_14 = ( static_57 | local_13 & 7[static_59]);
        					if (local_15) {
        						do argument_1.addMove(static_39 | local_6, local_14);
        						do argument_1.addMove(static_40 | local_6, local_14);
        						do argument_1.addMove(static_41 | local_6, local_14);
        						do argument_1.addMove(static_42 | local_6, local_14);
        // Unhandled VM instruction: GotoInstruction{label='IF_END15}
        					}
        					do argument_1.addMove(local_6, local_14);
        				}
        			}
        // Unhandled VM instruction: GotoInstruction{label='IF_END2}
        		}
        		if (( local_10 & 7 = static_9)) {
        			let local_8 = 0;
        			while (~(( local_8[local_3] = 0))) {
        				let local_1 = ( local_0 + local_8[local_3]);
        				if (( local_1 & static_0 = 0)) {
        					let local_5 = local_1[field_1];
        					if (~(local_5 = 0)) {
        						let local_13 = local_5.getValue();
        						if (field_5 = static_2) {
        							let local_16 = local_13 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END19}
        						}
        						let local_16 = local_13 < 8;
        						if (local_16) {
        							do argument_1.addMove(( ( static_44 | local_0[static_33]) | local_1[static_34]), ( static_57 | ( local_13 & 7[static_59] - static_9[static_58])));
        						}
        					}
        				}
        				let local_8 = local_8 + 1;
        			}
        // Unhandled VM instruction: GotoInstruction{label='IF_END16}
        		}
        		if (( local_10 & 7 = static_5)) {
        			let local_8 = 0;
        			while (~(( local_8[local_3] = 0))) {
        				let local_1 = ( local_0 + local_8[local_3]);
        				if (( local_1 & static_0 = 0)) {
        					let local_5 = local_1[field_1];
        					if (~(local_5 = 0)) {
        						let local_13 = local_5.getValue();
        						if (field_5 = static_2) {
        							let local_16 = local_13 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END24}
        						}
        						let local_16 = local_13 < 8;
        						if (local_16) {
        							do argument_1.addMove(( ( static_44 | local_0[static_33]) | local_1[static_34]), ( static_57 | ( local_13 & 7[static_59] - static_5[static_58])));
        						}
        					}
        				}
        				let local_8 = local_8 + 1;
        			}
        // Unhandled VM instruction: GotoInstruction{label='IF_END21}
        		}
        		let local_8 = 0;
        		while (~(( local_8[local_3] = 0))) {
        			let local_1 = ( local_0 + local_8[local_3]);
        			let local_17 = 0;
        			while (( ( local_1 & static_0 = 0) & ~(local_17))) {
        				let local_5 = local_1[field_1];
        				if (local_5 = 0) {
        					let local_1 = ( local_1 + local_8[local_3]);
        // Unhandled VM instruction: GotoInstruction{label='IF_END26}
        				}
        				let local_13 = local_5.getValue();
        				if (field_5 = static_2) {
        					let local_16 = local_13 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END27}
        				}
        				let local_16 = local_13 < 8;
        				if (local_16) {
        					do argument_1.addMove(( ( static_44 | local_0[static_33]) | local_1[static_34]), ( static_57 | ( local_13 & 7[static_59] - local_10 & 7[static_58])));
        				}
        				let local_17 = ~(0);
        			}
        			let local_8 = local_8 + 1;
        		}
        	}
        	let local_7 = local_7 + 1;
        }
        return;
    }

    method void genPseudoLegalMoves(int argument_0) {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var Piece local_4;
        var Piece local_5;
        var MoveList local_6;
        var int local_7;
        var int local_8;
        var int local_9;
        var int local_10;
        var int local_11;
        var int local_12;
        var int local_13;
        var int local_14;
        var int local_15;
        var int local_16;
        var int local_17;
        var int local_18;
        var int local_19;
        var int local_20;
        var int local_21;
        var int local_22;
        var int local_23;
        var int local_24;
        var BoardState local_25;
        let local_25 = 0[field_4];
        let local_23 = local_25.getEnPassantSq();
        if (field_5 = static_2) {
        	let local_2 = field_2.getPieces();
        	let local_9 = field_2.getCount();
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        let local_2 = field_3.getPieces();
        let local_9 = field_3.getCount();
        do argument_1.resetCount();
        while (local_7 < local_9) {
        	let local_4 = local_7[local_2];
        	if (~(local_4.isDead())) {
        		let local_1 = local_4.getSquare();
        		let local_10 = local_4.getValue();
        		let local_3 = local_10 & 7[static_51];
        		if (( local_10 & 7 = static_4)) {
        			if (field_5 = static_2) {
        				let local_11 = local_1 + 15;
        				let local_12 = local_1 + 17;
        				let local_13 = local_1 + 16;
        				let local_14 = local_1 + 32;
        				let local_19 = local_1 < 32;
        				let local_20 = local_1 > 87;
        // Unhandled VM instruction: GotoInstruction{label='IF_END3}
        			}
        			let local_11 = local_1 - 15;
        			let local_12 = local_1 - 17;
        			let local_13 = local_1 - 16;
        			let local_14 = local_1 - 32;
        			let local_19 = local_1 > 87;
        			let local_20 = local_1 < 32;
        			if (( local_11 & static_0 = 0)) {
        				let local_5 = local_11[field_1];
        				if (local_5 = 0) {
        					if (local_11 = local_23) {
        						do argument_1.addMove(( ( static_43 | local_1[static_33]) | local_11[static_34]), ( static_57 | static_4[static_59]));
        					}
        // Unhandled VM instruction: GotoInstruction{label='IF_END5}
        				}
        				let local_15 = local_5.getValue();
        				if (field_5 = static_2) {
        					let local_21 = local_15 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END7}
        				}
        				let local_21 = local_15 < 8;
        				if (local_21) {
        					let local_6 = ( ( static_44 | local_1[static_33]) | local_11[static_34]);
        					let local_16 = ( static_57 | local_15 & 7[static_59]);
        					if (local_20) {
        						do argument_1.addMove(static_39 | local_6, local_16);
        						do argument_1.addMove(static_40 | local_6, local_16);
        						do argument_1.addMove(static_41 | local_6, local_16);
        						do argument_1.addMove(static_42 | local_6, local_16);
        // Unhandled VM instruction: GotoInstruction{label='IF_END9}
        					}
        					do argument_1.addMove(local_6, local_16);
        				}
        			}
        			if (( local_12 & static_0 = 0)) {
        				let local_5 = local_12[field_1];
        				if (local_5 = 0) {
        					if (local_12 = local_23) {
        						do argument_1.addMove(( ( static_43 | local_1[static_33]) | local_12[static_34]), ( static_57 | static_4[static_59]));
        					}
        // Unhandled VM instruction: GotoInstruction{label='IF_END11}
        				}
        				let local_15 = local_5.getValue();
        				if (field_5 = static_2) {
        					let local_21 = local_15 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END13}
        				}
        				let local_21 = local_15 < 8;
        				if (local_21) {
        					let local_6 = ( ( static_44 | local_1[static_33]) | local_12[static_34]);
        					let local_16 = ( static_57 | local_15 & 7[static_59]);
        					if (local_20) {
        						do argument_1.addMove(static_39 | local_6, local_16);
        						do argument_1.addMove(static_40 | local_6, local_16);
        						do argument_1.addMove(static_41 | local_6, local_16);
        						do argument_1.addMove(static_42 | local_6, local_16);
        // Unhandled VM instruction: GotoInstruction{label='IF_END15}
        					}
        					do argument_1.addMove(local_6, local_16);
        				}
        			}
        			if (( local_13[field_1] = 0)) {
        				let local_6 = ( local_1[static_33] | local_13[static_34]);
        				if (local_20) {
        					do argument_1.addMove(static_39 | local_6, static_56);
        					do argument_1.addMove(static_40 | local_6, 0);
        					do argument_1.addMove(static_41 | local_6, 0);
        					do argument_1.addMove(static_42 | local_6, 0);
        // Unhandled VM instruction: GotoInstruction{label='IF_END17}
        				}
        				do argument_1.addMove(local_6, 0);
        				if (local_19) {
        					if (( local_14[field_1] = 0)) {
        						do argument_1.addMove(( ( static_38 | local_1[static_33]) | local_14[static_34]), 0);
        					}
        				}
        			}
        // Unhandled VM instruction: GotoInstruction{label='IF_END2}
        		}
        		if (( local_10 & 7 = static_9)) {
        			if (~(local_25.getSideToMoveInCheck())) {
        				let local_24 = local_25.getCastlingRights();
        				if (field_5 = static_2) {
        					let local_17 = static_47;
        					let local_18 = static_48;
        // Unhandled VM instruction: GotoInstruction{label='IF_END22}
        				}
        				let local_17 = static_49;
        				let local_18 = static_50;
        				if (( local_24 & local_17 = local_17)) {
        					if (( ( local_1[1][field_1] = 0) & ( local_1[2][field_1] = 0))) {
        						if (~(isAttacked(local_1 + 1, -(field_5)))) {
        							do argument_1.addMove(( ( static_45 | local_1[static_33]) | local_1[2][static_34]), 0);
        						}
        					}
        				}
        				if (( local_24 & local_18 = local_18)) {
        					if (( ( ( local_1 - 1[field_1] = 0) & ( local_1 - 2[field_1] = 0)) & ( local_1 - 3[field_1] = 0))) {
        						if (~(isAttacked(local_1 - 1, -(field_5)))) {
        							do argument_1.addMove(( ( static_46 | local_1[static_33]) | local_1 - 2[static_34]), 0);
        						}
        					}
        				}
        			}
        			let local_8 = 0;
        			while (~(( local_8[local_3] = 0))) {
        				let local_0 = ( local_1 + local_8[local_3]);
        				if (( local_0 & static_0 = 0)) {
        					let local_5 = local_0[field_1];
        					if (local_5 = 0) {
        						do argument_1.addMove(( local_1[static_33] | local_0[static_34]), 0);
        // Unhandled VM instruction: GotoInstruction{label='IF_END30}
        					}
        					let local_15 = local_5.getValue();
        					if (field_5 = static_2) {
        						let local_21 = local_15 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END31}
        					}
        					let local_21 = local_15 < 8;
        					if (local_21) {
        						do argument_1.addMove(( ( static_44 | local_1[static_33]) | local_0[static_34]), ( static_57 | ( local_15 & 7[static_59] - static_9[static_58])));
        					}
        				}
        				let local_8 = local_8 + 1;
        			}
        // Unhandled VM instruction: GotoInstruction{label='IF_END20}
        		}
        		if (( local_10 & 7 = static_5)) {
        			let local_8 = 0;
        			while (~(( local_8[local_3] = 0))) {
        				let local_0 = ( local_1 + local_8[local_3]);
        				if (( local_0 & static_0 = 0)) {
        					let local_5 = local_0[field_1];
        					if (local_5 = 0) {
        						do argument_1.addMove(( local_1[static_33] | local_0[static_34]), 0);
        // Unhandled VM instruction: GotoInstruction{label='IF_END35}
        					}
        					let local_15 = local_5.getValue();
        					if (field_5 = static_2) {
        						let local_21 = local_15 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END36}
        					}
        					let local_21 = local_15 < 8;
        					if (local_21) {
        						do argument_1.addMove(( ( static_44 | local_1[static_33]) | local_0[static_34]), ( static_57 | ( local_15 & 7[static_59] - static_5[static_58])));
        					}
        				}
        				let local_8 = local_8 + 1;
        			}
        // Unhandled VM instruction: GotoInstruction{label='IF_END33}
        		}
        		let local_8 = 0;
        		while (~(( local_8[local_3] = 0))) {
        			let local_0 = ( local_1 + local_8[local_3]);
        			let local_22 = 0;
        			while (( ( local_0 & static_0 = 0) & ~(local_22))) {
        				let local_5 = local_0[field_1];
        				if (local_5 = 0) {
        					do argument_1.addMove(( local_1[static_33] | local_0[static_34]), 0);
        					let local_0 = ( local_0 + local_8[local_3]);
        // Unhandled VM instruction: GotoInstruction{label='IF_END38}
        				}
        				let local_15 = local_5.getValue();
        				if (field_5 = static_2) {
        					let local_21 = local_15 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END39}
        				}
        				let local_21 = local_15 < 8;
        				if (local_21) {
        					do argument_1.addMove(( ( static_44 | local_1[static_33]) | local_0[static_34]), ( static_57 | ( local_15 & 7[static_59] - local_10 & 7[static_58])));
        				}
        				let local_22 = ~(0);
        			}
        			let local_8 = local_8 + 1;
        		}
        	}
        	let local_7 = local_7 + 1;
        }
        return;
    }

    function void initwPawnPieceSquareTable() {
        
        let 16[static_61] = 2;
        
        let 17[static_61] = 3;
        
        let 18[static_61] = 4;
        
        let 19[static_61] = 0;
        
        let 20[static_61] = 0;
        
        let 21[static_61] = 4;
        
        let 22[static_61] = 3;
        
        let 23[static_61] = 2;
        
        let 32[static_61] = 4;
        
        let 33[static_61] = 6;
        
        let 34[static_61] = 12;
        
        let 35[static_61] = 12;
        
        let 36[static_61] = 12;
        
        let 37[static_61] = 4;
        
        let 38[static_61] = 6;
        
        let 39[static_61] = 4;
        
        let 48[static_61] = 4;
        
        let 49[static_61] = 7;
        
        let 50[static_61] = 18;
        
        let 51[static_61] = 25;
        
        let 52[static_61] = 25;
        
        let 53[static_61] = 16;
        
        let 54[static_61] = 7;
        
        let 55[static_61] = 4;
        
        let 64[static_61] = 6;
        
        let 65[static_61] = 11;
        
        let 66[static_61] = 18;
        
        let 67[static_61] = 27;
        
        let 68[static_61] = 27;
        
        let 69[static_61] = 16;
        
        let 70[static_61] = 11;
        
        let 71[static_61] = 6;
        
        let 80[static_61] = 10;
        
        let 81[static_61] = 15;
        
        let 82[static_61] = 24;
        
        let 83[static_61] = 32;
        
        let 84[static_61] = 32;
        
        let 85[static_61] = 24;
        
        let 86[static_61] = 15;
        
        let 87[static_61] = 10;
        
        let 96[static_61] = 10;
        
        let 97[static_61] = 15;
        
        let 98[static_61] = 24;
        
        let 99[static_61] = 32;
        
        let 100[static_61] = 32;
        
        let 101[static_61] = 24;
        
        let 102[static_61] = 15;
        
        let 103[static_61] = 10;
        
        return;
    }

    function void initbPawnPieceSquareTable() {
        
        let 16[static_62] = 10;
        
        let 17[static_62] = 15;
        
        let 18[static_62] = 24;
        
        let 19[static_62] = 32;
        
        let 20[static_62] = 32;
        
        let 21[static_62] = 24;
        
        let 22[static_62] = 15;
        
        let 23[static_62] = 10;
        
        let 32[static_62] = 10;
        
        let 33[static_62] = 15;
        
        let 34[static_62] = 24;
        
        let 35[static_62] = 32;
        
        let 36[static_62] = 32;
        
        let 37[static_62] = 24;
        
        let 38[static_62] = 15;
        
        let 39[static_62] = 10;
        
        let 48[static_62] = 6;
        
        let 49[static_62] = 11;
        
        let 50[static_62] = 18;
        
        let 51[static_62] = 27;
        
        let 52[static_62] = 27;
        
        let 53[static_62] = 16;
        
        let 54[static_62] = 11;
        
        let 55[static_62] = 6;
        
        let 64[static_62] = 4;
        
        let 65[static_62] = 7;
        
        let 66[static_62] = 18;
        
        let 67[static_62] = 25;
        
        let 68[static_62] = 25;
        
        let 69[static_62] = 16;
        
        let 70[static_62] = 7;
        
        let 71[static_62] = 4;
        
        let 80[static_62] = 4;
        
        let 81[static_62] = 6;
        
        let 82[static_62] = 12;
        
        let 83[static_62] = 12;
        
        let 84[static_62] = 12;
        
        let 85[static_62] = 4;
        
        let 86[static_62] = 6;
        
        let 87[static_62] = 4;
        
        let 96[static_62] = 2;
        
        let 97[static_62] = 3;
        
        let 98[static_62] = 4;
        
        let 99[static_62] = 0;
        
        let 100[static_62] = 0;
        
        let 101[static_62] = 4;
        
        let 102[static_62] = 3;
        
        let 103[static_62] = 2;
        
        return;
    }

    function void initwKnightPieceSquareTable() {
        
        let 0[static_63] = -(7);
        
        let 1[static_63] = -(3);
        
        let 2[static_63] = 1;
        
        let 3[static_63] = 3;
        
        let 4[static_63] = 3;
        
        let 5[static_63] = 1;
        
        let 6[static_63] = -(3);
        
        let 7[static_63] = -(7);
        
        let 16[static_63] = 2;
        
        let 17[static_63] = 6;
        
        let 18[static_63] = 14;
        
        let 19[static_63] = 20;
        
        let 20[static_63] = 20;
        
        let 21[static_63] = 14;
        
        let 22[static_63] = 6;
        
        let 23[static_63] = 2;
        
        let 32[static_63] = 6;
        
        let 33[static_63] = 14;
        
        let 34[static_63] = 22;
        
        let 35[static_63] = 26;
        
        let 36[static_63] = 26;
        
        let 37[static_63] = 22;
        
        let 38[static_63] = 14;
        
        let 39[static_63] = 6;
        
        let 48[static_63] = 8;
        
        let 49[static_63] = 18;
        
        let 50[static_63] = 26;
        
        let 51[static_63] = 30;
        
        let 52[static_63] = 30;
        
        let 53[static_63] = 26;
        
        let 54[static_63] = 18;
        
        let 55[static_63] = 8;
        
        let 64[static_63] = 8;
        
        let 65[static_63] = 18;
        
        let 66[static_63] = 30;
        
        let 67[static_63] = 32;
        
        let 68[static_63] = 32;
        
        let 69[static_63] = 30;
        
        let 70[static_63] = 18;
        
        let 71[static_63] = 8;
        
        let 80[static_63] = 6;
        
        let 81[static_63] = 14;
        
        let 82[static_63] = 28;
        
        let 83[static_63] = 32;
        
        let 84[static_63] = 32;
        
        let 85[static_63] = 28;
        
        let 86[static_63] = 14;
        
        let 87[static_63] = 6;
        
        let 96[static_63] = 2;
        
        let 97[static_63] = 6;
        
        let 98[static_63] = 14;
        
        let 99[static_63] = 20;
        
        let 100[static_63] = 20;
        
        let 101[static_63] = 14;
        
        let 102[static_63] = 6;
        
        let 103[static_63] = 2;
        
        let 112[static_63] = -(7);
        
        let 113[static_63] = -(3);
        
        let 114[static_63] = 1;
        
        let 115[static_63] = 3;
        
        let 116[static_63] = 3;
        
        let 117[static_63] = 1;
        
        let 118[static_63] = -(3);
        
        let 119[static_63] = -(7);
        
        return;
    }

    function void initbKnightPieceSquareTable() {
        
        let 0[static_64] = -(7);
        
        let 1[static_64] = -(3);
        
        let 2[static_64] = 1;
        
        let 3[static_64] = 3;
        
        let 4[static_64] = 3;
        
        let 5[static_64] = 1;
        
        let 6[static_64] = -(3);
        
        let 7[static_64] = -(7);
        
        let 16[static_64] = 2;
        
        let 17[static_64] = 6;
        
        let 18[static_64] = 14;
        
        let 19[static_64] = 20;
        
        let 20[static_64] = 20;
        
        let 21[static_64] = 14;
        
        let 22[static_64] = 6;
        
        let 23[static_64] = 2;
        
        let 32[static_64] = 6;
        
        let 33[static_64] = 14;
        
        let 34[static_64] = 28;
        
        let 35[static_64] = 32;
        
        let 36[static_64] = 32;
        
        let 37[static_64] = 28;
        
        let 38[static_64] = 14;
        
        let 39[static_64] = 6;
        
        let 48[static_64] = 8;
        
        let 49[static_64] = 18;
        
        let 50[static_64] = 30;
        
        let 51[static_64] = 32;
        
        let 52[static_64] = 32;
        
        let 53[static_64] = 30;
        
        let 54[static_64] = 18;
        
        let 55[static_64] = 8;
        
        let 64[static_64] = 8;
        
        let 65[static_64] = 18;
        
        let 66[static_64] = 26;
        
        let 67[static_64] = 30;
        
        let 68[static_64] = 30;
        
        let 69[static_64] = 26;
        
        let 70[static_64] = 18;
        
        let 71[static_64] = 8;
        
        let 80[static_64] = 6;
        
        let 81[static_64] = 14;
        
        let 82[static_64] = 22;
        
        let 83[static_64] = 26;
        
        let 84[static_64] = 26;
        
        let 85[static_64] = 22;
        
        let 86[static_64] = 14;
        
        let 87[static_64] = 6;
        
        let 96[static_64] = 2;
        
        let 97[static_64] = 6;
        
        let 98[static_64] = 14;
        
        let 99[static_64] = 20;
        
        let 100[static_64] = 20;
        
        let 101[static_64] = 14;
        
        let 102[static_64] = 6;
        
        let 103[static_64] = 2;
        
        let 112[static_64] = -(7);
        
        let 113[static_64] = -(3);
        
        let 114[static_64] = 1;
        
        let 115[static_64] = 3;
        
        let 116[static_64] = 3;
        
        let 117[static_64] = 1;
        
        let 118[static_64] = -(3);
        
        let 119[static_64] = -(7);
        
        return;
    }

    function void initwBishopPieceSquareTable() {
        
        let 0[static_65] = 16;
        
        let 1[static_65] = 16;
        
        let 2[static_65] = 16;
        
        let 3[static_65] = 16;
        
        let 4[static_65] = 16;
        
        let 5[static_65] = 16;
        
        let 6[static_65] = 16;
        
        let 7[static_65] = 16;
        
        let 16[static_65] = 26;
        
        let 17[static_65] = 29;
        
        let 18[static_65] = 31;
        
        let 19[static_65] = 31;
        
        let 20[static_65] = 31;
        
        let 21[static_65] = 31;
        
        let 22[static_65] = 29;
        
        let 23[static_65] = 26;
        
        let 32[static_65] = 26;
        
        let 33[static_65] = 28;
        
        let 34[static_65] = 32;
        
        let 35[static_65] = 32;
        
        let 36[static_65] = 32;
        
        let 37[static_65] = 32;
        
        let 38[static_65] = 28;
        
        let 39[static_65] = 26;
        
        let 48[static_65] = 16;
        
        let 49[static_65] = 26;
        
        let 50[static_65] = 32;
        
        let 51[static_65] = 32;
        
        let 52[static_65] = 32;
        
        let 53[static_65] = 32;
        
        let 54[static_65] = 26;
        
        let 55[static_65] = 16;
        
        let 64[static_65] = 16;
        
        let 65[static_65] = 26;
        
        let 66[static_65] = 32;
        
        let 67[static_65] = 32;
        
        let 68[static_65] = 32;
        
        let 69[static_65] = 32;
        
        let 70[static_65] = 26;
        
        let 71[static_65] = 16;
        
        let 80[static_65] = 16;
        
        let 81[static_65] = 28;
        
        let 82[static_65] = 32;
        
        let 83[static_65] = 32;
        
        let 84[static_65] = 32;
        
        let 85[static_65] = 32;
        
        let 86[static_65] = 28;
        
        let 87[static_65] = 16;
        
        let 96[static_65] = 16;
        
        let 97[static_65] = 29;
        
        let 98[static_65] = 31;
        
        let 99[static_65] = 31;
        
        let 100[static_65] = 31;
        
        let 101[static_65] = 31;
        
        let 102[static_65] = 29;
        
        let 103[static_65] = 16;
        
        let 112[static_65] = 16;
        
        let 113[static_65] = 16;
        
        let 114[static_65] = 16;
        
        let 115[static_65] = 16;
        
        let 116[static_65] = 16;
        
        let 117[static_65] = 16;
        
        let 118[static_65] = 16;
        
        let 119[static_65] = 16;
        
        return;
    }

    function void initbBishopPieceSquareTable() {
        
        let 0[static_66] = 16;
        
        let 1[static_66] = 16;
        
        let 2[static_66] = 16;
        
        let 3[static_66] = 16;
        
        let 4[static_66] = 16;
        
        let 5[static_66] = 16;
        
        let 6[static_66] = 16;
        
        let 7[static_66] = 16;
        
        let 16[static_66] = 16;
        
        let 17[static_66] = 29;
        
        let 18[static_66] = 31;
        
        let 19[static_66] = 31;
        
        let 20[static_66] = 31;
        
        let 21[static_66] = 31;
        
        let 22[static_66] = 29;
        
        let 23[static_66] = 16;
        
        let 32[static_66] = 16;
        
        let 33[static_66] = 28;
        
        let 34[static_66] = 32;
        
        let 35[static_66] = 32;
        
        let 36[static_66] = 32;
        
        let 37[static_66] = 32;
        
        let 38[static_66] = 28;
        
        let 39[static_66] = 16;
        
        let 48[static_66] = 16;
        
        let 49[static_66] = 26;
        
        let 50[static_66] = 32;
        
        let 51[static_66] = 32;
        
        let 52[static_66] = 32;
        
        let 53[static_66] = 32;
        
        let 54[static_66] = 26;
        
        let 55[static_66] = 16;
        
        let 64[static_66] = 16;
        
        let 65[static_66] = 26;
        
        let 66[static_66] = 32;
        
        let 67[static_66] = 32;
        
        let 68[static_66] = 32;
        
        let 69[static_66] = 32;
        
        let 70[static_66] = 26;
        
        let 71[static_66] = 16;
        
        let 80[static_66] = 26;
        
        let 81[static_66] = 28;
        
        let 82[static_66] = 32;
        
        let 83[static_66] = 32;
        
        let 84[static_66] = 32;
        
        let 85[static_66] = 32;
        
        let 86[static_66] = 28;
        
        let 87[static_66] = 26;
        
        let 96[static_66] = 26;
        
        let 97[static_66] = 29;
        
        let 98[static_66] = 31;
        
        let 99[static_66] = 31;
        
        let 100[static_66] = 31;
        
        let 101[static_66] = 31;
        
        let 102[static_66] = 29;
        
        let 103[static_66] = 26;
        
        let 112[static_66] = 16;
        
        let 113[static_66] = 16;
        
        let 114[static_66] = 16;
        
        let 115[static_66] = 16;
        
        let 116[static_66] = 16;
        
        let 117[static_66] = 16;
        
        let 118[static_66] = 16;
        
        let 119[static_66] = 16;
        
        return;
    }

    function void initwRookPieceSquareTable() {
        
        let 0[static_67] = 0;
        
        let 1[static_67] = 0;
        
        let 2[static_67] = 0;
        
        let 3[static_67] = 3;
        
        let 4[static_67] = 3;
        
        let 5[static_67] = 0;
        
        let 6[static_67] = 0;
        
        let 7[static_67] = 0;
        
        let 16[static_67] = -(2);
        
        let 17[static_67] = 0;
        
        let 18[static_67] = 0;
        
        let 19[static_67] = 0;
        
        let 20[static_67] = 0;
        
        let 21[static_67] = 0;
        
        let 22[static_67] = 0;
        
        let 23[static_67] = -(2);
        
        let 32[static_67] = -(2);
        
        let 33[static_67] = 0;
        
        let 34[static_67] = 0;
        
        let 35[static_67] = 0;
        
        let 36[static_67] = 0;
        
        let 37[static_67] = 0;
        
        let 38[static_67] = 0;
        
        let 39[static_67] = -(2);
        
        let 48[static_67] = -(2);
        
        let 49[static_67] = 0;
        
        let 50[static_67] = 0;
        
        let 51[static_67] = 0;
        
        let 52[static_67] = 0;
        
        let 53[static_67] = 0;
        
        let 54[static_67] = 0;
        
        let 55[static_67] = -(2);
        
        let 64[static_67] = -(2);
        
        let 65[static_67] = 0;
        
        let 66[static_67] = 0;
        
        let 67[static_67] = 0;
        
        let 68[static_67] = 0;
        
        let 69[static_67] = 0;
        
        let 70[static_67] = 0;
        
        let 71[static_67] = -(2);
        
        let 80[static_67] = -(2);
        
        let 81[static_67] = 0;
        
        let 82[static_67] = 0;
        
        let 83[static_67] = 0;
        
        let 84[static_67] = 0;
        
        let 85[static_67] = 0;
        
        let 86[static_67] = 0;
        
        let 87[static_67] = -(2);
        
        let 96[static_67] = 10;
        
        let 97[static_67] = 10;
        
        let 98[static_67] = 10;
        
        let 99[static_67] = 10;
        
        let 100[static_67] = 10;
        
        let 101[static_67] = 10;
        
        let 102[static_67] = 10;
        
        let 103[static_67] = 10;
        
        let 112[static_67] = 0;
        
        let 113[static_67] = 0;
        
        let 114[static_67] = 0;
        
        let 115[static_67] = 0;
        
        let 116[static_67] = 0;
        
        let 117[static_67] = 0;
        
        let 118[static_67] = 0;
        
        let 119[static_67] = 0;
        
        return;
    }

    function void initbRookPieceSquareTable() {
        
        let 0[static_68] = 0;
        
        let 1[static_68] = 0;
        
        let 2[static_68] = 0;
        
        let 3[static_68] = 0;
        
        let 4[static_68] = 0;
        
        let 5[static_68] = 0;
        
        let 6[static_68] = 0;
        
        let 7[static_68] = 0;
        
        let 16[static_68] = 10;
        
        let 17[static_68] = 10;
        
        let 18[static_68] = 10;
        
        let 19[static_68] = 10;
        
        let 20[static_68] = 10;
        
        let 21[static_68] = 10;
        
        let 22[static_68] = 10;
        
        let 23[static_68] = 10;
        
        let 32[static_68] = -(2);
        
        let 33[static_68] = 0;
        
        let 34[static_68] = 0;
        
        let 35[static_68] = 0;
        
        let 36[static_68] = 0;
        
        let 37[static_68] = 0;
        
        let 38[static_68] = 0;
        
        let 39[static_68] = -(2);
        
        let 48[static_68] = -(2);
        
        let 49[static_68] = 0;
        
        let 50[static_68] = 0;
        
        let 51[static_68] = 0;
        
        let 52[static_68] = 0;
        
        let 53[static_68] = 0;
        
        let 54[static_68] = 0;
        
        let 55[static_68] = -(2);
        
        let 64[static_68] = -(2);
        
        let 65[static_68] = 0;
        
        let 66[static_68] = 0;
        
        let 67[static_68] = 0;
        
        let 68[static_68] = 0;
        
        let 69[static_68] = 0;
        
        let 70[static_68] = 0;
        
        let 71[static_68] = -(2);
        
        let 80[static_68] = -(2);
        
        let 81[static_68] = 0;
        
        let 82[static_68] = 0;
        
        let 83[static_68] = 0;
        
        let 84[static_68] = 0;
        
        let 85[static_68] = 0;
        
        let 86[static_68] = 0;
        
        let 87[static_68] = -(2);
        
        let 96[static_68] = -(2);
        
        let 97[static_68] = 0;
        
        let 98[static_68] = 0;
        
        let 99[static_68] = 0;
        
        let 100[static_68] = 0;
        
        let 101[static_68] = 0;
        
        let 102[static_68] = 0;
        
        let 103[static_68] = -(2);
        
        let 112[static_68] = 0;
        
        let 113[static_68] = 0;
        
        let 114[static_68] = 0;
        
        let 115[static_68] = 3;
        
        let 116[static_68] = 3;
        
        let 117[static_68] = 0;
        
        let 118[static_68] = 0;
        
        let 119[static_68] = 0;
        
        return;
    }

    function void initwQueenPieceSquareTable() {
        
        let 0[static_69] = -(2);
        
        let 1[static_69] = -(2);
        
        let 2[static_69] = -(2);
        
        let 3[static_69] = 0;
        
        let 4[static_69] = 0;
        
        let 5[static_69] = -(2);
        
        let 6[static_69] = -(2);
        
        let 7[static_69] = -(2);
        
        let 16[static_69] = 0;
        
        let 17[static_69] = 0;
        
        let 18[static_69] = 1;
        
        let 19[static_69] = 1;
        
        let 20[static_69] = 1;
        
        let 21[static_69] = 0;
        
        let 22[static_69] = 0;
        
        let 23[static_69] = 0;
        
        let 32[static_69] = 0;
        
        let 33[static_69] = 1;
        
        let 34[static_69] = 1;
        
        let 35[static_69] = 1;
        
        let 36[static_69] = 1;
        
        let 37[static_69] = 0;
        
        let 38[static_69] = 0;
        
        let 39[static_69] = 0;
        
        let 48[static_69] = 0;
        
        let 49[static_69] = 0;
        
        let 50[static_69] = 0;
        
        let 51[static_69] = 2;
        
        let 52[static_69] = 2;
        
        let 53[static_69] = 0;
        
        let 54[static_69] = 0;
        
        let 55[static_69] = 0;
        
        let 64[static_69] = 0;
        
        let 65[static_69] = 0;
        
        let 66[static_69] = 0;
        
        let 67[static_69] = 2;
        
        let 68[static_69] = 2;
        
        let 69[static_69] = 0;
        
        let 70[static_69] = 0;
        
        let 71[static_69] = 0;
        
        let 80[static_69] = -(2);
        
        let 81[static_69] = -(2);
        
        let 82[static_69] = 0;
        
        let 83[static_69] = 0;
        
        let 84[static_69] = 0;
        
        let 85[static_69] = 0;
        
        let 86[static_69] = 0;
        
        let 87[static_69] = 0;
        
        let 96[static_69] = -(2);
        
        let 97[static_69] = -(2);
        
        let 98[static_69] = 0;
        
        let 99[static_69] = 0;
        
        let 100[static_69] = 0;
        
        let 101[static_69] = 0;
        
        let 102[static_69] = 0;
        
        let 103[static_69] = 0;
        
        let 112[static_69] = -(2);
        
        let 113[static_69] = -(2);
        
        let 114[static_69] = 0;
        
        let 115[static_69] = 0;
        
        let 116[static_69] = 0;
        
        let 117[static_69] = 0;
        
        let 118[static_69] = 0;
        
        let 119[static_69] = 0;
        
        return;
    }

    function void initbQueenPieceSquareTable() {
        
        let 0[static_70] = -(2);
        
        let 1[static_70] = -(2);
        
        let 2[static_70] = 0;
        
        let 3[static_70] = 0;
        
        let 4[static_70] = 0;
        
        let 5[static_70] = 0;
        
        let 6[static_70] = 0;
        
        let 7[static_70] = 0;
        
        let 16[static_70] = -(2);
        
        let 17[static_70] = -(2);
        
        let 18[static_70] = 0;
        
        let 19[static_70] = 0;
        
        let 20[static_70] = 0;
        
        let 21[static_70] = 0;
        
        let 22[static_70] = 0;
        
        let 23[static_70] = 0;
        
        let 32[static_70] = -(2);
        
        let 33[static_70] = -(2);
        
        let 34[static_70] = 0;
        
        let 35[static_70] = 0;
        
        let 36[static_70] = 0;
        
        let 37[static_70] = 0;
        
        let 38[static_70] = 0;
        
        let 39[static_70] = 0;
        
        let 48[static_70] = 0;
        
        let 49[static_70] = 0;
        
        let 50[static_70] = 0;
        
        let 51[static_70] = 2;
        
        let 52[static_70] = 2;
        
        let 53[static_70] = 0;
        
        let 54[static_70] = 0;
        
        let 55[static_70] = 0;
        
        let 64[static_70] = 0;
        
        let 65[static_70] = 0;
        
        let 66[static_70] = 0;
        
        let 67[static_70] = 2;
        
        let 68[static_70] = 2;
        
        let 69[static_70] = 0;
        
        let 70[static_70] = 0;
        
        let 71[static_70] = 0;
        
        let 80[static_70] = 0;
        
        let 81[static_70] = 1;
        
        let 82[static_70] = 1;
        
        let 83[static_70] = 1;
        
        let 84[static_70] = 1;
        
        let 85[static_70] = 0;
        
        let 86[static_70] = 0;
        
        let 87[static_70] = 0;
        
        let 96[static_70] = 0;
        
        let 97[static_70] = 0;
        
        let 98[static_70] = 1;
        
        let 99[static_70] = 1;
        
        let 100[static_70] = 1;
        
        let 101[static_70] = 0;
        
        let 102[static_70] = 0;
        
        let 103[static_70] = 0;
        
        let 112[static_70] = -(2);
        
        let 113[static_70] = -(2);
        
        let 114[static_70] = -(2);
        
        let 115[static_70] = 0;
        
        let 116[static_70] = 0;
        
        let 117[static_70] = -(2);
        
        let 118[static_70] = -(2);
        
        let 119[static_70] = -(2);
        
        return;
    }

    function void initwKingPieceSquareTable() {
        
        let 0[static_71] = 3;
        
        let 1[static_71] = 3;
        
        let 2[static_71] = 8;
        
        let 3[static_71] = -(12);
        
        let 4[static_71] = -(8);
        
        let 5[static_71] = -(12);
        
        let 6[static_71] = 10;
        
        let 7[static_71] = 5;
        
        let 16[static_71] = -(5);
        
        let 17[static_71] = -(5);
        
        let 18[static_71] = -(12);
        
        let 19[static_71] = -(12);
        
        let 20[static_71] = -(12);
        
        let 21[static_71] = -(12);
        
        let 22[static_71] = -(5);
        
        let 23[static_71] = -(5);
        
        let 32[static_71] = -(7);
        
        let 33[static_71] = -(15);
        
        let 34[static_71] = -(15);
        
        let 35[static_71] = -(15);
        
        let 36[static_71] = -(15);
        
        let 37[static_71] = -(15);
        
        let 38[static_71] = -(15);
        
        let 39[static_71] = -(7);
        
        let 48[static_71] = -(20);
        
        let 49[static_71] = -(20);
        
        let 50[static_71] = -(20);
        
        let 51[static_71] = -(20);
        
        let 52[static_71] = -(20);
        
        let 53[static_71] = -(20);
        
        let 54[static_71] = -(20);
        
        let 55[static_71] = -(20);
        
        let 64[static_71] = -(20);
        
        let 65[static_71] = -(20);
        
        let 66[static_71] = -(20);
        
        let 67[static_71] = -(20);
        
        let 68[static_71] = -(20);
        
        let 69[static_71] = -(20);
        
        let 70[static_71] = -(20);
        
        let 71[static_71] = -(20);
        
        let 80[static_71] = -(20);
        
        let 81[static_71] = -(20);
        
        let 82[static_71] = -(20);
        
        let 83[static_71] = -(20);
        
        let 84[static_71] = -(20);
        
        let 85[static_71] = -(20);
        
        let 86[static_71] = -(20);
        
        let 87[static_71] = -(20);
        
        let 96[static_71] = -(20);
        
        let 97[static_71] = -(20);
        
        let 98[static_71] = -(20);
        
        let 99[static_71] = -(20);
        
        let 100[static_71] = -(20);
        
        let 101[static_71] = -(20);
        
        let 102[static_71] = -(20);
        
        let 103[static_71] = -(20);
        
        let 112[static_71] = -(20);
        
        let 113[static_71] = -(20);
        
        let 114[static_71] = -(20);
        
        let 115[static_71] = -(20);
        
        let 116[static_71] = -(20);
        
        let 117[static_71] = -(20);
        
        let 118[static_71] = -(20);
        
        let 119[static_71] = -(20);
        
        return;
    }

    function void initwKingEndPieceSquareTable() {
        
        let 0[static_73] = 0;
        
        let 1[static_73] = 0;
        
        let 2[static_73] = 1;
        
        let 3[static_73] = 2;
        
        let 4[static_73] = 2;
        
        let 5[static_73] = 1;
        
        let 6[static_73] = 0;
        
        let 7[static_73] = 0;
        
        let 16[static_73] = 0;
        
        let 17[static_73] = 2;
        
        let 18[static_73] = 4;
        
        let 19[static_73] = 5;
        
        let 20[static_73] = 5;
        
        let 21[static_73] = 4;
        
        let 22[static_73] = 2;
        
        let 23[static_73] = 0;
        
        let 32[static_73] = 1;
        
        let 33[static_73] = 4;
        
        let 34[static_73] = 6;
        
        let 35[static_73] = 7;
        
        let 36[static_73] = 7;
        
        let 37[static_73] = 6;
        
        let 38[static_73] = 4;
        
        let 39[static_73] = 1;
        
        let 48[static_73] = 1;
        
        let 49[static_73] = 4;
        
        let 50[static_73] = 10;
        
        let 51[static_73] = 10;
        
        let 52[static_73] = 10;
        
        let 53[static_73] = 10;
        
        let 54[static_73] = 4;
        
        let 55[static_73] = 1;
        
        let 64[static_73] = 1;
        
        let 65[static_73] = 4;
        
        let 66[static_73] = 12;
        
        let 67[static_73] = 15;
        
        let 68[static_73] = 15;
        
        let 69[static_73] = 12;
        
        let 70[static_73] = 4;
        
        let 71[static_73] = 1;
        
        let 80[static_73] = 0;
        
        let 81[static_73] = 7;
        
        let 82[static_73] = 10;
        
        let 83[static_73] = 12;
        
        let 84[static_73] = 12;
        
        let 85[static_73] = 10;
        
        let 86[static_73] = 7;
        
        let 87[static_73] = 0;
        
        let 96[static_73] = 0;
        
        let 97[static_73] = 2;
        
        let 98[static_73] = 4;
        
        let 99[static_73] = 5;
        
        let 100[static_73] = 5;
        
        let 101[static_73] = 4;
        
        let 102[static_73] = 2;
        
        let 103[static_73] = 0;
        
        let 112[static_73] = 0;
        
        let 113[static_73] = 0;
        
        let 114[static_73] = 0;
        
        let 115[static_73] = 0;
        
        let 116[static_73] = 0;
        
        let 117[static_73] = 0;
        
        let 118[static_73] = 0;
        
        let 119[static_73] = 0;
        
        return;
    }

    function void initbKingPieceSquareTable() {
        
        let 0[static_72] = -(20);
        
        let 1[static_72] = -(20);
        
        let 2[static_72] = -(20);
        
        let 3[static_72] = -(20);
        
        let 4[static_72] = -(20);
        
        let 5[static_72] = -(20);
        
        let 6[static_72] = -(20);
        
        let 7[static_72] = -(20);
        
        let 16[static_72] = -(20);
        
        let 17[static_72] = -(20);
        
        let 18[static_72] = -(20);
        
        let 19[static_72] = -(20);
        
        let 20[static_72] = -(20);
        
        let 21[static_72] = -(20);
        
        let 22[static_72] = -(20);
        
        let 23[static_72] = -(20);
        
        let 32[static_72] = -(20);
        
        let 33[static_72] = -(20);
        
        let 34[static_72] = -(20);
        
        let 35[static_72] = -(20);
        
        let 36[static_72] = -(20);
        
        let 37[static_72] = -(20);
        
        let 38[static_72] = -(20);
        
        let 39[static_72] = -(20);
        
        let 48[static_72] = -(20);
        
        let 49[static_72] = -(20);
        
        let 50[static_72] = -(20);
        
        let 51[static_72] = -(20);
        
        let 52[static_72] = -(20);
        
        let 53[static_72] = -(20);
        
        let 54[static_72] = -(20);
        
        let 55[static_72] = -(20);
        
        let 64[static_72] = -(20);
        
        let 65[static_72] = -(20);
        
        let 66[static_72] = -(20);
        
        let 67[static_72] = -(20);
        
        let 68[static_72] = -(20);
        
        let 69[static_72] = -(20);
        
        let 70[static_72] = -(20);
        
        let 71[static_72] = -(20);
        
        let 80[static_72] = -(7);
        
        let 81[static_72] = -(15);
        
        let 82[static_72] = -(15);
        
        let 83[static_72] = -(15);
        
        let 84[static_72] = -(15);
        
        let 85[static_72] = -(15);
        
        let 86[static_72] = -(15);
        
        let 87[static_72] = -(7);
        
        let 96[static_72] = -(5);
        
        let 97[static_72] = -(5);
        
        let 98[static_72] = -(12);
        
        let 99[static_72] = -(12);
        
        let 100[static_72] = -(12);
        
        let 101[static_72] = -(12);
        
        let 102[static_72] = -(5);
        
        let 103[static_72] = -(5);
        
        let 112[static_72] = 3;
        
        let 113[static_72] = 3;
        
        let 114[static_72] = 8;
        
        let 115[static_72] = -(12);
        
        let 116[static_72] = -(8);
        
        let 117[static_72] = -(12);
        
        let 118[static_72] = 10;
        
        let 119[static_72] = 5;
        
        return;
    }

    function void initbKingEndPieceSquareTable() {
        
        let 0[static_74] = 0;
        
        let 1[static_74] = 0;
        
        let 2[static_74] = 0;
        
        let 3[static_74] = 0;
        
        let 4[static_74] = 0;
        
        let 5[static_74] = 0;
        
        let 6[static_74] = 0;
        
        let 7[static_74] = 0;
        
        let 16[static_74] = 0;
        
        let 17[static_74] = 2;
        
        let 18[static_74] = 4;
        
        let 19[static_74] = 5;
        
        let 20[static_74] = 5;
        
        let 21[static_74] = 4;
        
        let 22[static_74] = 2;
        
        let 23[static_74] = 0;
        
        let 32[static_74] = 0;
        
        let 33[static_74] = 7;
        
        let 34[static_74] = 10;
        
        let 35[static_74] = 12;
        
        let 36[static_74] = 12;
        
        let 37[static_74] = 10;
        
        let 38[static_74] = 7;
        
        let 39[static_74] = 0;
        
        let 48[static_74] = 1;
        
        let 49[static_74] = 4;
        
        let 50[static_74] = 12;
        
        let 51[static_74] = 15;
        
        let 52[static_74] = 15;
        
        let 53[static_74] = 12;
        
        let 54[static_74] = 4;
        
        let 55[static_74] = 1;
        
        let 64[static_74] = 1;
        
        let 65[static_74] = 4;
        
        let 66[static_74] = 10;
        
        let 67[static_74] = 10;
        
        let 68[static_74] = 10;
        
        let 69[static_74] = 10;
        
        let 70[static_74] = 4;
        
        let 71[static_74] = 1;
        
        let 80[static_74] = 1;
        
        let 81[static_74] = 4;
        
        let 82[static_74] = 6;
        
        let 83[static_74] = 7;
        
        let 84[static_74] = 7;
        
        let 85[static_74] = 6;
        
        let 86[static_74] = 4;
        
        let 87[static_74] = 1;
        
        let 96[static_74] = 0;
        
        let 97[static_74] = 2;
        
        let 98[static_74] = 4;
        
        let 99[static_74] = 5;
        
        let 100[static_74] = 5;
        
        let 101[static_74] = 4;
        
        let 102[static_74] = 2;
        
        let 103[static_74] = 0;
        
        let 112[static_74] = 0;
        
        let 113[static_74] = 0;
        
        let 114[static_74] = 1;
        
        let 115[static_74] = 2;
        
        let 116[static_74] = 2;
        
        let 117[static_74] = 1;
        
        let 118[static_74] = 0;
        
        let 119[static_74] = 0;
        
        return;
    }

    function void initAttackArray() {
        var int local_0;
        
        while (local_0 < 239) {
        	let local_0[static_30] = static_16;
        	
        	let local_0 = local_0 + 1;
        }
        let 0[static_30] = static_21;
        
        let 7[static_30] = static_18;
        
        let 14[static_30] = static_21;
        
        let 17[static_30] = static_21;
        
        let 23[static_30] = static_18;
        
        let 29[static_30] = static_21;
        
        let 34[static_30] = static_21;
        
        let 39[static_30] = static_18;
        
        let 44[static_30] = static_21;
        
        let 51[static_30] = static_21;
        
        let 55[static_30] = static_18;
        
        let 59[static_30] = static_21;
        
        let 68[static_30] = static_21;
        
        let 71[static_30] = static_18;
        
        let 74[static_30] = static_21;
        
        let 85[static_30] = static_21;
        
        let 86[static_30] = static_22;
        
        let 87[static_30] = static_18;
        
        let 88[static_30] = static_22;
        
        let 89[static_30] = static_21;
        
        let 101[static_30] = static_22;
        
        let 102[static_30] = static_20;
        
        let 103[static_30] = static_17;
        
        let 104[static_30] = static_20;
        
        let 105[static_30] = static_22;
        
        let 112[static_30] = static_18;
        
        let 113[static_30] = static_18;
        
        let 114[static_30] = static_18;
        
        let 115[static_30] = static_18;
        
        let 116[static_30] = static_18;
        
        let 117[static_30] = static_18;
        
        let 118[static_30] = static_17;
        
        let 120[static_30] = static_17;
        
        let 121[static_30] = static_18;
        
        let 122[static_30] = static_18;
        
        let 123[static_30] = static_18;
        
        let 124[static_30] = static_18;
        
        let 125[static_30] = static_18;
        
        let 126[static_30] = static_18;
        
        let 133[static_30] = static_22;
        
        let 134[static_30] = static_19;
        
        let 135[static_30] = static_17;
        
        let 136[static_30] = static_19;
        
        let 137[static_30] = static_22;
        
        let 149[static_30] = static_21;
        
        let 150[static_30] = static_22;
        
        let 151[static_30] = static_18;
        
        let 152[static_30] = static_22;
        
        let 153[static_30] = static_21;
        
        let 164[static_30] = static_21;
        
        let 167[static_30] = static_18;
        
        let 170[static_30] = static_21;
        
        let 179[static_30] = static_21;
        
        let 183[static_30] = static_18;
        
        let 187[static_30] = static_21;
        
        let 194[static_30] = static_21;
        
        let 199[static_30] = static_18;
        
        let 204[static_30] = static_21;
        
        let 209[static_30] = static_21;
        
        let 215[static_30] = static_18;
        
        let 221[static_30] = static_21;
        
        let 224[static_30] = static_21;
        
        let 231[static_30] = static_18;
        
        let 238[static_30] = static_21;
        
        return;
    }

    function void initAttackSliderSteps() {
        var int local_0;
        
        while (local_0 < 239) {
        	let local_0[static_31] = 0;
        	
        	let local_0 = local_0 + 1;
        }
        let 0[static_31] = -(17);
        
        let 7[static_31] = -(16);
        
        let 14[static_31] = -(15);
        
        let 17[static_31] = -(17);
        
        let 23[static_31] = -(16);
        
        let 29[static_31] = -(15);
        
        let 34[static_31] = -(17);
        
        let 39[static_31] = -(16);
        
        let 44[static_31] = -(15);
        
        let 51[static_31] = -(17);
        
        let 55[static_31] = -(16);
        
        let 59[static_31] = -(15);
        
        let 68[static_31] = -(17);
        
        let 71[static_31] = -(16);
        
        let 74[static_31] = -(15);
        
        let 85[static_31] = -(17);
        
        let 87[static_31] = -(16);
        
        let 89[static_31] = -(15);
        
        let 102[static_31] = -(17);
        
        let 103[static_31] = -(16);
        
        let 104[static_31] = -(15);
        
        let 112[static_31] = -(1);
        
        let 113[static_31] = -(1);
        
        let 114[static_31] = -(1);
        
        let 115[static_31] = -(1);
        
        let 116[static_31] = -(1);
        
        let 117[static_31] = -(1);
        
        let 118[static_31] = -(1);
        
        let 120[static_31] = 1;
        
        let 121[static_31] = 1;
        
        let 122[static_31] = 1;
        
        let 123[static_31] = 1;
        
        let 124[static_31] = 1;
        
        let 125[static_31] = 1;
        
        let 126[static_31] = 1;
        
        let 134[static_31] = 15;
        
        let 135[static_31] = 16;
        
        let 136[static_31] = 17;
        
        let 149[static_31] = 15;
        
        let 151[static_31] = 16;
        
        let 153[static_31] = 17;
        
        let 164[static_31] = 15;
        
        let 167[static_31] = 16;
        
        let 170[static_31] = 17;
        
        let 179[static_31] = 15;
        
        let 183[static_31] = 16;
        
        let 187[static_31] = 17;
        
        let 194[static_31] = 15;
        
        let 199[static_31] = 16;
        
        let 204[static_31] = 17;
        
        let 209[static_31] = 15;
        
        let 215[static_31] = 16;
        
        let 221[static_31] = 17;
        
        let 224[static_31] = 15;
        
        let 231[static_31] = 16;
        
        let 238[static_31] = 17;
        
        return;
    }

    function int convertSq120to64(int argument_0) {
        
        return argument_0[static_34];
    }

    function int convertSq64to120(int argument_0) {
        
        return argument_0[static_35];
    }

    method int pieceValFromBoardIndex(int argument_0) {
        var Piece local_0;
        let local_0 = argument_1[field_1];
        return local_0.getValue();
    }

    function void initSqEncoders() {
        var int local_0;
        
        while (local_0 < 8) {
        	let local_0[static_33] = Math.multiply(local_0, 64);
        	
        	let local_0[static_34] = local_0;
        	
        	let local_0 = local_0 + 1;
        }
        let local_0 = 16;
        while (local_0 < 24) {
        	let local_0[static_33] = Math.multiply(local_0 - 8, 64);
        	
        	let local_0[static_34] = local_0 - 8;
        	
        	let local_0 = local_0 + 1;
        }
        let local_0 = 32;
        while (local_0 < 40) {
        	let local_0[static_33] = Math.multiply(local_0 - 16, 64);
        	
        	let local_0[static_34] = local_0 - 16;
        	
        	let local_0 = local_0 + 1;
        }
        let local_0 = 48;
        while (local_0 < 56) {
        	let local_0[static_33] = Math.multiply(local_0 - 24, 64);
        	
        	let local_0[static_34] = local_0 - 24;
        	
        	let local_0 = local_0 + 1;
        }
        let local_0 = 64;
        while (local_0 < 72) {
        	let local_0[static_33] = Math.multiply(local_0 - 32, 64);
        	
        	let local_0[static_34] = local_0 - 32;
        	
        	let local_0 = local_0 + 1;
        }
        let local_0 = 80;
        while (local_0 < 88) {
        	let local_0[static_33] = Math.multiply(local_0 - 40, 64);
        	
        	let local_0[static_34] = local_0 - 40;
        	
        	let local_0 = local_0 + 1;
        }
        let local_0 = 96;
        while (local_0 < 104) {
        	let local_0[static_33] = Math.multiply(local_0 - 48, 64);
        	
        	let local_0[static_34] = local_0 - 48;
        	
        	let local_0 = local_0 + 1;
        }
        let local_0 = 112;
        while (local_0 < 120) {
        	let local_0[static_33] = Math.multiply(local_0 - 56, 64);
        	
        	let local_0[static_34] = local_0 - 56;
        	
        	let local_0 = local_0 + 1;
        }
        return;
    }

    function void initSqDecoder() {
        var int local_0;
        
        while (local_0 < 64) {
        	let local_0[static_35] = ( local_0 + ( local_0 & ~(7)));
        	
        	let local_0 = local_0 + 1;
        }
        return;
    }

}
