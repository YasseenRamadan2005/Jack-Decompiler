class Board {
    static int static_0;
    static int static_1;
    static int static_2;
    static int static_3;
    static int static_4;
    static int static_5;
    static int static_6;
    static int static_7;
    static int static_8;
    static int static_9;
    static int static_10;
    static int static_11;
    static int static_12;
    static int static_13;
    static int static_14;
    static int static_15;
    static int static_16;
    static int static_17;
    static int static_18;
    static int static_19;
    static int static_20;
    static int static_21;
    static int static_22;
    static int static_23;
    static int static_24;
    static int static_25;
    static int static_26;
    static int static_27;
    static int static_28;
    static int static_29;
    static int static_30;
    static int static_31;
    static int static_32;
    static int static_33;
    static int static_34;
    static int static_35;
    static int static_36;
    static int static_37;
    static int static_38;
    static int static_39;
    static int static_40;
    static int static_41;
    static int static_42;
    static int static_43;
    static int static_44;
    static int static_45;
    static int static_46;
    static int static_47;
    static int static_48;
    static int static_49;
    static int static_50;
    static int static_51;
    static int static_52;
    static int static_53;
    static int static_54;
    static int static_55;
    static int static_56;
    static int static_57;
    static int static_58;
    static int static_59;
    static int static_60;
    static int static_61;
    static int static_62;
    static int static_63;
    static int static_64;
    static int static_65;
    static int static_66;
    static int static_67;
    static int static_68;
    static int static_69;
    static int static_70;
    static int static_71;
    static int static_72;
    static int static_73;
    static int static_74;
    field int field_0;
    field Array field_1;
    field PieceList field_2;
    field PieceList field_3;
    field int field_4;
    field Board field_5;
    field MoveList field_6;
    function void init() {
        
        let static_0 = 136;
        let static_2 = 1;
        let static_3 = -(1);
        let static_4 = 1;
        let static_5 = 2;
        let static_6 = 5;
        let static_7 = 6;
        let static_8 = 7;
        let static_9 = 3;
        let static_10 = static_4 | 8;
        let static_11 = static_5 | 8;
        let static_12 = static_6 | 8;
        let static_13 = static_7 | 8;
        let static_14 = static_8 | 8;
        let static_15 = static_9 | 8;
        let static_1 = 4;
        let static_23 = 64;
        let static_24 = 32;
        let static_25 = 16;
        let static_26 = 8;
        let static_27 = 4;
        let static_28 = 2;
        let static_29 = 1;
        let static_16 = 0;
        let static_17 = ( static_23 | static_24 | static_25);
        let static_18 = static_24 | static_25;
        let static_19 = ( ( static_23 | static_24 | static_26) | static_29);
        let static_20 = ( ( static_23 | static_24 | static_26) | static_28);
        let static_21 = static_24 | static_26;
        let static_22 = static_27;
        let static_30 = Array.new(239);
        do Board.initAttackArray();
        let static_31 = Array.new(239);
        do Board.initAttackSliderSteps();
        let static_32 = Array.new(16);
        let static_32[static_4] = static_29;
        
        let static_32[static_5] = static_27;
        
        let static_32[static_6] = static_26;
        
        let static_32[static_7] = static_25;
        
        let static_32[static_8] = static_24;
        
        let static_32[static_9] = static_23;
        
        let static_32[static_10] = static_28;
        
        let static_32[static_11] = static_27;
        
        let static_32[static_12] = static_26;
        
        let static_32[static_13] = static_25;
        
        let static_32[static_14] = static_24;
        
        let static_32[static_15] = static_23;
        
        let static_33 = Array.new(120);
        let static_34 = Array.new(120);
        do Board.initSqEncoders();
        let static_35 = Array.new(64);
        do Board.initSqDecoder();
        let static_36 = 63;
        let static_37 = -(4096);
        let static_38 = 4096;
        let static_42 = 32767 + 1;
        let static_41 = -(28672);
        let static_40 = -(24576);
        let static_39 = -(20480);
        let static_43 = 20480;
        let static_44 = 16384;
        let static_45 = 8192;
        let static_46 = 12288;
        let static_47 = 1;
        let static_48 = 2;
        let static_49 = 4;
        let static_50 = 8;
        let static_52 = Array.new(9);
        let static_52[0] = 14;
        
        let static_52[1] = 31;
        
        let static_52[2] = 33;
        
        let static_52[3] = 18;
        
        let static_52[4] = -(14);
        
        let static_52[5] = -(31);
        
        let static_52[6] = -(33);
        
        let static_52[7] = -(18);
        
        let static_52[8] = 0;
        
        let static_53 = Array.new(5);
        let static_53[0] = 15;
        
        let static_53[1] = 17;
        
        let static_53[2] = -(15);
        
        let static_53[3] = -(17);
        
        let static_53[4] = 0;
        
        let static_54 = Array.new(5);
        let static_54[0] = 1;
        
        let static_54[1] = 16;
        
        let static_54[2] = -(1);
        
        let static_54[3] = -(16);
        
        let static_54[4] = 0;
        
        let static_55 = Array.new(9);
        let static_55[0] = 15;
        
        let static_55[1] = 17;
        
        let static_55[2] = -(15);
        
        let static_55[3] = -(17);
        
        let static_55[4] = 1;
        
        let static_55[5] = 16;
        
        let static_55[6] = -(1);
        
        let static_55[7] = -(16);
        
        let static_55[8] = 0;
        
        let static_51 = Array.new(8);
        let static_51[static_5] = static_52;
        
        let static_51[static_6] = static_53;
        
        let static_51[static_7] = static_54;
        
        let static_51[static_8] = static_55;
        
        let static_51[static_9] = static_55;
        
        let static_56 = 2048;
        let static_57 = 8192;
        let static_58 = Array.new(8);
        let static_58[static_5] = 1;
        
        let static_58[static_6] = 2;
        
        let static_58[static_7] = 3;
        
        let static_58[static_8] = 4;
        
        let static_58[static_9] = 5;
        
        let static_59 = Array.new(8);
        let static_59[static_4] = 100;
        
        let static_59[static_5] = 320;
        
        let static_59[static_6] = 320;
        
        let static_59[static_7] = 550;
        
        let static_59[static_8] = 950;
        
        let static_59[static_9] = 1024;
        
        let static_61 = Array.new(120);
        do Board.initwPawnPieceSquareTable();
        let static_62 = Array.new(120);
        do Board.initbPawnPieceSquareTable();
        let static_63 = Array.new(120);
        do Board.initwKnightPieceSquareTable();
        let static_64 = Array.new(120);
        do Board.initbKnightPieceSquareTable();
        let static_65 = Array.new(120);
        do Board.initwBishopPieceSquareTable();
        let static_66 = Array.new(120);
        do Board.initbBishopPieceSquareTable();
        let static_67 = Array.new(120);
        do Board.initwRookPieceSquareTable();
        let static_68 = Array.new(120);
        do Board.initbRookPieceSquareTable();
        let static_69 = Array.new(120);
        do Board.initwQueenPieceSquareTable();
        let static_70 = Array.new(120);
        do Board.initbQueenPieceSquareTable();
        let static_71 = Array.new(120);
        do Board.initwKingPieceSquareTable();
        let static_72 = Array.new(120);
        do Board.initbKingPieceSquareTable();
        let static_60 = Array.new(16);
        let static_60[static_4] = static_61;
        
        let static_60[static_5] = static_63;
        
        let static_60[static_6] = static_65;
        
        let static_60[static_7] = static_67;
        
        let static_60[static_8] = static_69;
        
        let static_60[static_9] = 0;
        
        let static_60[static_10] = static_62;
        
        let static_60[static_11] = static_64;
        
        let static_60[static_12] = static_66;
        
        let static_60[static_13] = static_68;
        
        let static_60[static_14] = static_70;
        
        let static_60[static_15] = 0;
        
        let static_73 = Array.new(120);
        do Board.initwKingEndPieceSquareTable();
        let static_74 = Array.new(120);
        do Board.initbKingEndPieceSquareTable();
        return;
    }

    function void final() {
        
        do static_30.dispose();
        do static_31.dispose();
        do static_32.dispose();
        do static_33.dispose();
        do static_34.dispose();
        do static_35.dispose();
        do static_51.dispose();
        do static_52.dispose();
        do static_53.dispose();
        do static_54.dispose();
        do static_55.dispose();
        do static_58.dispose();
        do static_59.dispose();
        do static_60.dispose();
        do static_61.dispose();
        do static_62.dispose();
        do static_63.dispose();
        do static_64.dispose();
        do static_65.dispose();
        do static_66.dispose();
        do static_67.dispose();
        do static_68.dispose();
        do static_69.dispose();
        do static_70.dispose();
        do static_71.dispose();
        do static_72.dispose();
        do static_73.dispose();
        do static_74.dispose();
        return;
    }

    constructor Board new(int argument_0) {
        var int local_0;
        let field_1 = Array.new(128);
        let field_2 = PieceList.new();
        let field_3 = PieceList.new();
        do initBoard(argument_0);
        let field_6 = MoveList.new(300, 0);
        return this;
    }

    method void dispose() {
        do field_1.dispose();
        do field_2.dispose();
        do field_3.dispose();
        do field_6.dispose();
        do Memory.deAlloc(this);
        return;
    }

    function int matValue(int argument_0) {
        
        return static_59[argument_0];
    }

    function int decodeFromSq(int argument_0) {
        var int local_0;
        var int local_1;
        var int local_2;
        
        let local_0 = 64;
        let local_1 = 1;
        while (~(local_0 = 4096)) {
        	if (( argument_0 & local_0 = local_0)) {
        		let local_2 = local_2 | local_1;
        	}
        	let local_0 = local_0 + local_0;
        	let local_1 = local_1 + local_1;
        }
        return local_2;
    }

    method void clearMoveHistory() {
        do field_6.resetCount();
        return;
    }

    method int getMoveHistory() {
        return field_6;
    }

    method int getwPieceList() {
        return field_2;
    }

    method int getbPieceList() {
        return field_3;
    }

    method int isStandardConfig() {
        return field_0;
    }

    method int convertUIMoveStrToMove(int argument_0, String argument_1) {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        var int local_5;
        var int local_6;
        var int local_7;
        var int local_8;
        var int local_9;
        var int local_10;
        var int local_11;
        let local_11 = 0;
        let local_4 = argument_2.getCount();
        let local_9 = argument_2.getMoves();
        let local_0 = ( argument_1.charAt(0) - 65);
        let local_1 = ( argument_1.charAt(1) - 49);
        let local_5 = ( Math.multiply(8, local_1) + local_0);
        let local_0 = ( argument_1.charAt(2) - 65);
        let local_1 = ( argument_1.charAt(3) - 49);
        let local_6 = ( Math.multiply(8, local_1) + local_0);
        let local_7 = ( Math.multiply(local_5, 64) | local_6);
        while (local_2 < local_4) {
        	let local_3 = local_9[local_2];
        	if (( local_3 & 4095 = local_7)) {
        		if (( local_3 & static_42 = static_42)) {
        			do Output.println();
        			do Output.printString(Game.getPromoteStr());
        			while (~(local_11)) {
        				let local_10 = Keyboard.readChar();
        				if (local_10 = 81) {
        					let local_8 = static_39;
        // Unhandled VM instruction: GotoInstruction{label='IF_END2}
        				}
        				if (local_10 = 82) {
        					let local_8 = static_40;
        // Unhandled VM instruction: GotoInstruction{label='IF_END3}
        				}
        				if (local_10 = 66) {
        					let local_8 = static_41;
        // Unhandled VM instruction: GotoInstruction{label='IF_END4}
        				}
        				if (local_10 = 78) {
        					let local_8 = static_42;
        // Unhandled VM instruction: GotoInstruction{label='IF_END5}
        				}
        				do Output.backSpace();
        				let local_11 = ~(local_8 = 0);
        			}
        			do Output.println();
        			if (( local_3 & static_44 = static_44)) {
        				let local_8 = local_8 | static_44;
        			}
        			while (~(0)) {
        				if (( local_8 | local_7 = local_3)) {
        					return local_3;
        				}
        				let local_2 = local_2 + 1;
        				let local_3 = local_9[local_2];
        			}
        // Unhandled VM instruction: GotoInstruction{label='IF_END1}
        		}
        		return local_3;
        	}
        	let local_2 = local_2 + 1;
        }
        return 0;
    }

    function int convertMoveToUIMoveStr(int argument_0, int argument_1) {
        var int local_0;
        var int local_1;
        var String local_2;
        var String local_3;
        var String local_4;
        var String local_5;
        
        let local_0 = Board.decodeFromSq(argument_0);
        let local_1 = argument_0 & static_36;
        let local_3 = local_0 & 7;
        let local_2 = Math.divide(local_0, 8);
        let local_5 = local_1 & 7;
        let local_4 = Math.divide(local_1, 8);
        do argument_1.setCharAt(0, local_3 + 65);
        do argument_1.setCharAt(1, local_2 + 49);
        do argument_1.setCharAt(2, local_5 + 65);
        do argument_1.setCharAt(3, local_4 + 49);
        return argument_1;
    }

    method int getTurn() {
        return field_5;
    }

    method int matIsLow(int argument_0) {
        if (field_5 = static_2) {
        	return ( argument_1.getwMaterial() < 1575);
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        return ( argument_1.getbMaterial() < 1575);
    }

    method void initBoard(int argument_0) {
        var int local_0;
        var BoardState local_1;
        while (local_0 < 128) {
        	let field_1[local_0] = 0;
        	
        	let local_0 = local_0 + 1;
        }
        do field_2.resetCount();
        do field_3.resetCount();
        let field_4 = argument_1;
        let local_1 = field_4[0];
        do local_1.resetState();
        do standardBoardConfig();
        let field_0 = ~(0);
        do local_1.resetMaterial(field_2, field_3);
        return;
    }

    method void standardBoardConfig() {
        var int local_0;
        let field_1[0] = field_2.addPiece(static_7, 0);
        
        let field_1[1] = field_2.addPiece(static_5, 1);
        
        let field_1[2] = field_2.addPiece(static_6, 2);
        
        let field_1[3] = field_2.addPiece(static_8, 3);
        
        let field_1[5] = field_2.addPiece(static_6, 5);
        
        let field_1[6] = field_2.addPiece(static_5, 6);
        
        let field_1[7] = field_2.addPiece(static_7, 7);
        
        let local_0 = 16;
        while (local_0 < 24) {
        	let field_1[local_0] = field_2.addPiece(static_4, local_0);
        	
        	let local_0 = local_0 + 1;
        }
        let field_1[4] = field_2.addPiece(static_9, 4);
        
        let field_1[112] = field_3.addPiece(static_13, 112);
        
        let field_1[113] = field_3.addPiece(static_11, 113);
        
        let field_1[114] = field_3.addPiece(static_12, 114);
        
        let field_1[115] = field_3.addPiece(static_14, 115);
        
        let field_1[117] = field_3.addPiece(static_12, 117);
        
        let field_1[118] = field_3.addPiece(static_11, 118);
        
        let field_1[119] = field_3.addPiece(static_13, 119);
        
        let local_0 = 96;
        while (local_0 < 104) {
        	let field_1[local_0] = field_3.addPiece(static_10, local_0);
        	
        	let local_0 = local_0 + 1;
        }
        let field_1[116] = field_3.addPiece(static_15, 116);
        
        let field_5 = static_2;
        return;
    }

    method void fixBoardState() {
        var int local_0;
        var BoardState local_1;
        let field_4 = field_4 - 1;
        let local_0 = field_4[0];
        let local_1 = field_4[1];
        do local_0.setState(local_1.getFiftyMoveCount(), local_1.getEnPassantSq(), local_1.getCastlingRights(), local_1.getCapturedPiece(), local_1.getwMaterial(), local_1.getbMaterial(), 0);
        do local_0.setSideToMoveInCheck(inCheck(field_5));
        return;
    }

    method int inCheck(int argument_0) {
        if (argument_1 = static_2) {
        	return isAttacked(field_2.getKingSquare(), -(argument_1));
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        return isAttacked(field_3.getKingSquare(), -(argument_1));
    }

    method int isAttacked(int argument_0, int argument_1) {
        var int local_0;
        var Piece local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        var int local_5;
        var int local_6;
        var int local_7;
        if (argument_2 = static_2) {
        	let local_0 = field_2.getPieces();
        	let local_3 = field_2.getCount();
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        let local_0 = field_3.getPieces();
        let local_3 = field_3.getCount();
        while (local_2 < local_3) {
        	let local_1 = local_0[local_2];
        	if (~(local_1.isDead())) {
        		let local_6 = local_1.getSquare();
        		let local_4 = ( argument_1 - local_6 + 119);
        		let local_5 = local_1.getValue();
        		if (~(( ( static_30[local_4] & static_32[local_5]) = 0))) {
        			if (( local_5 & static_1 = 0)) {
        				return ~(0);
        // Unhandled VM instruction: GotoInstruction{label='IF_END3}
        			}
        			let local_7 = 0;
        			while (~(local_7)) {
        				let local_6 = ( local_6 + static_31[local_4]);
        				if (local_6 = argument_1) {
        					return ~(0);
        				}
        				if (~(( field_1[local_6] = 0))) {
        					let local_7 = ~(0);
        				}
        			}
        		}
        	}
        	let local_2 = local_2 + 1;
        }
        return 0;
    }

    method int eval(int argument_0, int argument_1) {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        var int local_5;
        var BoardState local_6;
        var int local_7;
        var int local_8;
        var Piece local_9;
        let local_6 = field_4[0];
        let local_4 = local_6.getwMaterial();
        let local_5 = local_6.getbMaterial();
        let local_3 = local_4 - local_5;
        if (field_5 = static_3) {
        	let local_3 = -(local_3);
        }
        if (( local_3 - 300 > argument_2)) {
        	return argument_2;
        }
        if (( local_3 + 300 < argument_1)) {
        	return argument_1;
        }
        let local_7 = field_2.getPieces();
        let local_1 = field_2.getCount();
        while (local_0 < local_1) {
        	let local_9 = local_7[local_0];
        	if (~(local_9.isDead())) {
        		let local_2 = local_9.getValue();
        		if (local_2 = static_9) {
        			if (local_5 < 2445) {
        				let local_8 = static_73;
        // Unhandled VM instruction: GotoInstruction{label='IF_END5}
        			}
        			let local_8 = static_71;
        // Unhandled VM instruction: GotoInstruction{label='IF_END4}
        		}
        		let local_8 = static_60[local_2];
        		let local_4 = ( local_4 + local_8[local_9.getSquare()]);
        	}
        	let local_0 = local_0 + 1;
        }
        let local_7 = field_3.getPieces();
        let local_1 = field_3.getCount();
        let local_0 = 0;
        while (local_0 < local_1) {
        	let local_9 = local_7[local_0];
        	if (~(local_9.isDead())) {
        		let local_2 = local_9.getValue();
        		if (local_2 = static_15) {
        			if (( local_6.getwMaterial() < 2445)) {
        				let local_8 = static_74;
        // Unhandled VM instruction: GotoInstruction{label='IF_END8}
        			}
        			let local_8 = static_72;
        // Unhandled VM instruction: GotoInstruction{label='IF_END7}
        		}
        		let local_8 = static_60[local_2];
        		let local_5 = ( local_5 + local_8[local_9.getSquare()]);
        	}
        	let local_0 = local_0 + 1;
        }
        let local_3 = local_4 - local_5;
        if (field_5 = static_3) {
        	return -(local_3);
        }
        return local_3;
    }

    method void doRealMove(int argument_0) {
        do doMove(argument_1);
        do fixBoardState();
        if (( argument_1 & static_44 = static_44)) {
        	if (field_5 = static_2) {
        		do field_2.compress();
        // Unhandled VM instruction: GotoInstruction{label='IF_END1}
        	}
        	do field_3.compress();
        }
        return;
    }

    method int drawByRep2() {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        var int local_5;
        var int local_6;
        let local_0 = field_6.getMoves();
        let local_2 = field_6.getCount();
        if (local_2 < 5) {
        	return 0;
        }
        let local_3 = local_0[local_2 - 1];
        if (( local_3 & static_37 = 0)) {
        	let local_5 = Board.decodeFromSq(local_3);
        	let local_6 = local_3 & static_36;
        	let local_4 = local_0[local_2 - 3];
        	if (( local_4 & static_37 = 0)) {
        		if (( ( ( local_6 = ( local_0[local_2 - 5] & static_36)) & ( local_6 = Board.decodeFromSq(local_4))) & ( local_5 = local_4 & static_36))) {
        			let local_3 = local_0[local_2 - 2];
        			if (( local_3 & static_37 = 0)) {
        				let local_5 = Board.decodeFromSq(local_3);
        				let local_6 = local_3 & static_36;
        				let local_4 = local_0[local_2 - 4];
        				if (( local_4 & static_37 = 0)) {
        					if (( ( local_6 = Board.decodeFromSq(local_4)) & ( local_5 = local_4 & static_36))) {
        						return ~(0);
        					}
        				}
        			}
        		}
        	}
        }
        return 0;
    }

    method int drawByRep3() {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        var int local_5;
        var int local_6;
        let local_0 = field_6.getMoves();
        let local_2 = field_6.getCount();
        if (local_2 < 9) {
        	return 0;
        }
        let local_3 = local_0[local_2 - 1];
        if (( local_3 & static_37 = 0)) {
        	let local_5 = Board.decodeFromSq(local_3);
        	let local_6 = local_3 & static_36;
        	let local_4 = local_0[local_2 - 3];
        	if (( local_4 & static_37 = 0)) {
        		if (( ( ( local_6 = ( local_0[local_2 - 9] & static_36)) & ( local_6 = Board.decodeFromSq(local_4))) & ( local_5 = local_4 & static_36))) {
        			let local_3 = local_0[local_2 - 2];
        			if (( local_3 & static_37 = 0)) {
        				let local_5 = Board.decodeFromSq(local_3);
        				let local_6 = local_3 & static_36;
        				let local_4 = local_0[local_2 - 4];
        				if (( local_4 & static_37 = 0)) {
        					if (( ( local_6 = Board.decodeFromSq(local_4)) & ( local_5 = local_4 & static_36))) {
        						if (( local_0[local_2 - 5] = local_0[local_2 - 1])) {
        							if (( local_0[local_2 - 7] = local_0[local_2 - 3])) {
        								if (( local_0[local_2 - 6] = local_0[local_2 - 2])) {
        									if (( local_0[local_2 - 8] = local_0[local_2 - 4])) {
        										return ~(0);
        									}
        								}
        							}
        						}
        					}
        				}
        			}
        		}
        	}
        }
        return 0;
    }

    method int moveCapturesKing(int argument_0) {
        var Piece local_0;
        let local_0 = field_1[static_35[argument_1 & static_36]];
        if (local_0 = 0) {
        	return 0;
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        return ( ( local_0.getValue() & 7) = static_9);
    }

    method void doMove(int argument_0) {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        var int local_5;
        var int local_6;
        var Piece local_7;
        var Piece local_8;
        var Piece local_9;
        var int local_10;
        var int local_11;
        var int local_12;
        var int local_13;
        var int local_14;
        var BoardState local_15;
        var BoardState local_16;
        do field_6.addMoveIgnoreRank(argument_1);
        let local_0 = static_35[Board.decodeFromSq(argument_1)];
        let local_1 = static_35[argument_1 & static_36];
        let local_7 = field_1[local_0];
        let local_3 = local_7.getValue();
        let local_15 = field_4[0];
        let local_16 = field_4[1];
        let local_11 = -(1);
        let local_12 = local_15.getCastlingRights();
        let local_13 = local_15.getwMaterial();
        let local_14 = local_15.getbMaterial();
        if (( argument_1 & static_44 = static_44)) {
        	let local_10 = 0;
        	if (( argument_1 & static_37 = static_43)) {
        		if (field_5 = static_2) {
        			let local_2 = local_1 - 16;
        // Unhandled VM instruction: GotoInstruction{label='IF_END2}
        		}
        		let local_2 = local_1 + 16;
        		let local_8 = field_1[local_2];
        		let field_1[local_2] = 0;
        		
        		let local_4 = local_8.getValue();
        // Unhandled VM instruction: GotoInstruction{label='IF_END1}
        	}
        	let local_8 = field_1[local_1];
        	let local_4 = local_8.getValue();
        	if (( local_4 & 7 = static_7)) {
        		if (field_5 = static_3) {
        			if (local_1 = 7) {
        				let local_12 = local_12 & 14;
        // Unhandled VM instruction: GotoInstruction{label='IF_END5}
        			}
        			if (local_1 = 0) {
        				let local_12 = local_12 & 13;
        			}
        // Unhandled VM instruction: GotoInstruction{label='IF_END4}
        		}
        		if (local_1 = 119) {
        			let local_12 = local_12 & 11;
        // Unhandled VM instruction: GotoInstruction{label='IF_END7}
        		}
        		if (local_1 = 112) {
        			let local_12 = local_12 & 7;
        		}
        	}
        	do local_8.setDead(~(0));
        	if (field_5 = static_2) {
        		let local_14 = ( local_14 - static_59[local_4 & 7]);
        // Unhandled VM instruction: GotoInstruction{label='IF_END9}
        	}
        	let local_13 = ( local_13 - static_59[local_4]);
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        let local_8 = 0;
        if (( local_3 & 7 = static_4)) {
        	let local_10 = 0;
        	if (( argument_1 & static_37 = static_38)) {
        		if (field_5 = static_2) {
        			let local_11 = local_1 - 16;
        // Unhandled VM instruction: GotoInstruction{label='IF_END12}
        		}
        		let local_11 = local_1 + 16;
        	}
        // Unhandled VM instruction: GotoInstruction{label='IF_END10}
        }
        let local_10 = ( local_15.getFiftyMoveCount() + 1);
        if (( local_3 & 7 = static_9)) {
        	if (field_5 = static_2) {
        		let local_12 = local_12 & 12;
        // Unhandled VM instruction: GotoInstruction{label='IF_END14}
        	}
        	let local_12 = local_12 & 3;
        	if (( argument_1 & static_37 = static_45)) {
        		let local_5 = local_0 + 3;
        		let local_6 = local_0 + 1;
        		let local_9 = field_1[local_5];
        		let field_1[local_6] = local_9;
        		
        		let field_1[local_5] = 0;
        		
        		do local_9.setSquare(local_6);
        // Unhandled VM instruction: GotoInstruction{label='IF_END15}
        	}
        	if (( argument_1 & static_37 = static_46)) {
        		let local_5 = local_0 - 4;
        		let local_6 = local_0 - 1;
        		let local_9 = field_1[local_5];
        		let field_1[local_6] = local_9;
        		
        		let field_1[local_5] = 0;
        		
        		do local_9.setSquare(local_6);
        	}
        // Unhandled VM instruction: GotoInstruction{label='IF_END13}
        }
        if (( local_3 & 7 = static_7)) {
        	if (field_5 = static_2) {
        		if (local_0 = 7) {
        			let local_12 = local_12 & 14;
        // Unhandled VM instruction: GotoInstruction{label='IF_END19}
        		}
        		if (local_0 = 0) {
        			let local_12 = local_12 & 13;
        		}
        // Unhandled VM instruction: GotoInstruction{label='IF_END18}
        	}
        	if (local_0 = 119) {
        		let local_12 = local_12 & 11;
        // Unhandled VM instruction: GotoInstruction{label='IF_END21}
        	}
        	if (local_0 = 112) {
        		let local_12 = local_12 & 7;
        	}
        // Unhandled VM instruction: GotoInstruction{label='IF_END17}
        }
        if (( argument_1 & static_42 = static_42)) {
        	if (( argument_1 & static_39 = static_39)) {
        		if (field_5 = static_2) {
        			do local_7.setValue(static_8);
        // Unhandled VM instruction: GotoInstruction{label='IF_END25}
        		}
        		do local_7.setValue(static_14);
        // Unhandled VM instruction: GotoInstruction{label='IF_END24}
        	}
        	if (( argument_1 & static_40 = static_40)) {
        		if (field_5 = static_2) {
        			do local_7.setValue(static_7);
        // Unhandled VM instruction: GotoInstruction{label='IF_END27}
        		}
        		do local_7.setValue(static_13);
        // Unhandled VM instruction: GotoInstruction{label='IF_END26}
        	}
        	if (( argument_1 & static_41 = static_41)) {
        		if (field_5 = static_2) {
        			do local_7.setValue(static_6);
        // Unhandled VM instruction: GotoInstruction{label='IF_END29}
        		}
        		do local_7.setValue(static_12);
        // Unhandled VM instruction: GotoInstruction{label='IF_END28}
        	}
        	if (field_5 = static_2) {
        		do local_7.setValue(static_5);
        // Unhandled VM instruction: GotoInstruction{label='IF_END30}
        	}
        	do local_7.setValue(static_11);
        	if (field_5 = static_2) {
        		let local_13 = ( ( local_13 + static_59[local_7.getValue()]) - static_59[static_4]);
        // Unhandled VM instruction: GotoInstruction{label='IF_END31}
        	}
        	let local_14 = ( ( local_14 + static_59[( local_7.getValue() & 7)]) - static_59[static_4]);
        }
        let field_1[local_1] = local_7;
        
        let field_1[local_0] = 0;
        
        do local_7.setSquare(local_1);
        do local_16.setState(local_10, local_11, local_12, local_8, local_13, local_14, 0);
        let field_4 = field_4 + 1;
        let field_5 = -(field_5);
        return;
    }

    method void doQMove(int argument_0) {
        var int local_0;
        var int local_1;
        var int local_2;
        var Piece local_3;
        var Piece local_4;
        var int local_5;
        var int local_6;
        var BoardState local_7;
        var int local_8;
        let local_0 = static_35[Board.decodeFromSq(argument_1)];
        let local_1 = static_35[argument_1 & static_36];
        let local_3 = field_1[local_0];
        let local_7 = field_4[0];
        let local_8 = field_4[1];
        let local_5 = local_7.getwMaterial();
        let local_6 = local_7.getbMaterial();
        if (( argument_1 & static_37 = static_43)) {
        	if (field_5 = static_2) {
        		let local_2 = local_1 - 16;
        // Unhandled VM instruction: GotoInstruction{label='IF_END1}
        	}
        	let local_2 = local_1 + 16;
        	let local_4 = field_1[local_2];
        	let field_1[local_2] = 0;
        	
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        let local_4 = field_1[local_1];
        do local_4.setDead(~(0));
        if (field_5 = static_2) {
        	let local_6 = ( local_6 - static_59[( local_4.getValue() & 7)]);
        // Unhandled VM instruction: GotoInstruction{label='IF_END2}
        }
        let local_5 = ( local_5 - static_59[local_4.getValue()]);
        if (( argument_1 & static_42 = static_42)) {
        	if (( argument_1 & static_39 = static_39)) {
        		if (field_5 = static_2) {
        			do local_3.setValue(static_8);
        // Unhandled VM instruction: GotoInstruction{label='IF_END5}
        		}
        		do local_3.setValue(static_14);
        // Unhandled VM instruction: GotoInstruction{label='IF_END4}
        	}
        	if (( argument_1 & static_40 = static_40)) {
        		if (field_5 = static_2) {
        			do local_3.setValue(static_7);
        // Unhandled VM instruction: GotoInstruction{label='IF_END7}
        		}
        		do local_3.setValue(static_13);
        // Unhandled VM instruction: GotoInstruction{label='IF_END6}
        	}
        	if (( argument_1 & static_41 = static_41)) {
        		if (field_5 = static_2) {
        			do local_3.setValue(static_6);
        // Unhandled VM instruction: GotoInstruction{label='IF_END9}
        		}
        		do local_3.setValue(static_12);
        // Unhandled VM instruction: GotoInstruction{label='IF_END8}
        	}
        	if (field_5 = static_2) {
        		do local_3.setValue(static_5);
        // Unhandled VM instruction: GotoInstruction{label='IF_END10}
        	}
        	do local_3.setValue(static_11);
        	if (field_5 = static_2) {
        		let local_5 = ( ( local_5 + static_59[local_3.getValue()]) - static_59[static_4]);
        // Unhandled VM instruction: GotoInstruction{label='IF_END11}
        	}
        	let local_6 = ( ( local_6 + static_59[( local_3.getValue() & 7)]) - static_59[static_4]);
        }
        let field_1[local_1] = local_3;
        
        let field_1[local_0] = 0;
        
        do local_3.setSquare(local_1);
        do local_8.setState(0, -(1), 0, local_4, local_5, local_6, 0);
        let field_4 = field_4 + 1;
        let field_5 = -(field_5);
        return;
    }

    method void undoMove(int argument_0) {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        var Piece local_5;
        var Piece local_6;
        var Piece local_7;
        var BoardState local_8;
        do field_6.removeMove();
        let local_0 = static_35[Board.decodeFromSq(argument_1)];
        let local_1 = static_35[argument_1 & static_36];
        let field_5 = -(field_5);
        let local_5 = field_1[local_1];
        do local_5.setSquare(local_0);
        if (( argument_1 & static_42 = static_42)) {
        	if (field_5 = static_2) {
        		do local_5.setValue(static_4);
        // Unhandled VM instruction: GotoInstruction{label='IF_END1}
        	}
        	do local_5.setValue(static_10);
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        if (( argument_1 & static_37 = static_45)) {
        	let local_3 = local_0 + 3;
        	let local_4 = local_0 + 1;
        	let local_7 = field_1[local_4];
        	let field_1[local_3] = local_7;
        	
        	let field_1[local_4] = 0;
        	
        	do local_7.setSquare(local_3);
        // Unhandled VM instruction: GotoInstruction{label='IF_END2}
        }
        if (( argument_1 & static_37 = static_46)) {
        	let local_3 = local_0 - 4;
        	let local_4 = local_0 - 1;
        	let local_7 = field_1[local_4];
        	let field_1[local_3] = local_7;
        	
        	let field_1[local_4] = 0;
        	
        	do local_7.setSquare(local_3);
        }
        let field_1[local_0] = local_5;
        
        if (( argument_1 & static_44 = static_44)) {
        	let local_8 = field_4[0];
        	let local_6 = local_8.getCapturedPiece();
        	let local_2 = local_6.getSquare();
        	do local_6.setDead(0);
        	let field_1[local_2] = local_6;
        	
        	if (( argument_1 & static_37 = static_43)) {
        		let field_1[local_1] = 0;
        		
        	}
        // Unhandled VM instruction: GotoInstruction{label='IF_END4}
        }
        let field_1[local_1] = 0;
        
        let field_4 = field_4 - 1;
        return;
    }

    method void undoQMove(int argument_0) {
        var int local_0;
        var int local_1;
        var int local_2;
        var Piece local_3;
        var Piece local_4;
        var BoardState local_5;
        let local_0 = static_35[Board.decodeFromSq(argument_1)];
        let local_1 = static_35[argument_1 & static_36];
        let field_5 = -(field_5);
        let local_3 = field_1[local_1];
        do local_3.setSquare(local_0);
        if (( argument_1 & static_42 = static_42)) {
        	if (field_5 = static_2) {
        		do local_3.setValue(static_4);
        // Unhandled VM instruction: GotoInstruction{label='IF_END1}
        	}
        	do local_3.setValue(static_10);
        }
        let field_1[local_0] = local_3;
        
        let local_5 = field_4[0];
        let local_4 = local_5.getCapturedPiece();
        let local_2 = local_4.getSquare();
        do local_4.setDead(0);
        let field_1[local_2] = local_4;
        
        if (( argument_1 & static_37 = static_43)) {
        	let field_1[local_1] = 0;
        	
        }
        let field_4 = field_4 - 1;
        return;
    }

    method void doNullMove() {
        var BoardState local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        var int local_5;
        let local_0 = field_4[0];
        let local_1 = field_4[1];
        let local_3 = local_0.getCastlingRights();
        let local_4 = local_0.getwMaterial();
        let local_5 = local_0.getbMaterial();
        let local_2 = ( local_0.getFiftyMoveCount() + 1);
        do local_1.setState(local_2, -(1), local_3, 0, local_4, local_5, ~(0));
        let field_4 = field_4 + 1;
        let field_5 = -(field_5);
        return;
    }

    method void undoNullMove() {
        let field_5 = -(field_5);
        let field_4 = field_4 - 1;
        return;
    }

    method void genLegalMoves(int argument_0) {
        var MoveList local_0;
        var MoveList local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        var int local_5;
        let local_0 = argument_1[0];
        do local_0.resetCount();
        let local_1 = argument_1[1];
        do genPseudoLegalMoves(local_1);
        let local_2 = local_1.getMoves();
        let local_5 = local_1.getCount();
        while (local_3 < local_5) {
        	let local_4 = local_2[local_3];
        	do doMove(local_4);
        	if (~(inCheck(-(field_5)))) {
        		do local_0.addMoveIgnoreRank(local_4);
        	}
        	do undoMove(local_4);
        	let local_3 = local_3 + 1;
        }
        return;
    }

    method void genPseudoLegalQMoves(int argument_0) {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var Piece local_4;
        var Piece local_5;
        var MoveList local_6;
        var int local_7;
        var int local_8;
        var int local_9;
        var int local_10;
        var int local_11;
        var int local_12;
        var int local_13;
        var int local_14;
        var int local_15;
        var int local_16;
        var int local_17;
        var int local_18;
        var BoardState local_19;
        let local_19 = field_4[0];
        let local_18 = local_19.getEnPassantSq();
        if (field_5 = static_2) {
        	let local_2 = field_2.getPieces();
        	let local_9 = field_2.getCount();
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        let local_2 = field_3.getPieces();
        let local_9 = field_3.getCount();
        do argument_1.resetCount();
        while (local_7 < local_9) {
        	let local_4 = local_2[local_7];
        	if (~(local_4.isDead())) {
        		let local_0 = local_4.getSquare();
        		let local_10 = local_4.getValue();
        		let local_3 = static_51[local_10 & 7];
        		if (( local_10 & 7 = static_4)) {
        			if (field_5 = static_2) {
        				let local_11 = local_0 + 15;
        				let local_12 = local_0 + 17;
        				let local_15 = local_0 > 87;
        // Unhandled VM instruction: GotoInstruction{label='IF_END3}
        			}
        			let local_11 = local_0 - 15;
        			let local_12 = local_0 - 17;
        			let local_15 = local_0 < 32;
        			if (( local_11 & static_0 = 0)) {
        				let local_5 = field_1[local_11];
        				if (local_5 = 0) {
        					if (local_11 = local_18) {
        						do argument_1.addMove(( ( static_43 | static_33[local_0]) | static_34[local_11]), ( static_57 | static_59[static_4]));
        					}
        // Unhandled VM instruction: GotoInstruction{label='IF_END5}
        				}
        				let local_13 = local_5.getValue();
        				if (field_5 = static_2) {
        					let local_16 = local_13 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END7}
        				}
        				let local_16 = local_13 < 8;
        				if (local_16) {
        					let local_6 = ( ( static_44 | static_33[local_0]) | static_34[local_11]);
        					let local_14 = ( static_57 | static_59[local_13 & 7]);
        					if (local_15) {
        						do argument_1.addMove(static_39 | local_6, local_14);
        						do argument_1.addMove(static_40 | local_6, local_14);
        						do argument_1.addMove(static_41 | local_6, local_14);
        						do argument_1.addMove(static_42 | local_6, local_14);
        // Unhandled VM instruction: GotoInstruction{label='IF_END9}
        					}
        					do argument_1.addMove(local_6, local_14);
        				}
        			}
        			if (( local_12 & static_0 = 0)) {
        				let local_5 = field_1[local_12];
        				if (local_5 = 0) {
        					if (local_12 = local_18) {
        						do argument_1.addMove(( ( static_43 | static_33[local_0]) | static_34[local_12]), ( static_57 | static_59[static_4]));
        					}
        // Unhandled VM instruction: GotoInstruction{label='IF_END11}
        				}
        				let local_13 = local_5.getValue();
        				if (field_5 = static_2) {
        					let local_16 = local_13 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END13}
        				}
        				let local_16 = local_13 < 8;
        				if (local_16) {
        					let local_6 = ( ( static_44 | static_33[local_0]) | static_34[local_12]);
        					let local_14 = ( static_57 | static_59[local_13 & 7]);
        					if (local_15) {
        						do argument_1.addMove(static_39 | local_6, local_14);
        						do argument_1.addMove(static_40 | local_6, local_14);
        						do argument_1.addMove(static_41 | local_6, local_14);
        						do argument_1.addMove(static_42 | local_6, local_14);
        // Unhandled VM instruction: GotoInstruction{label='IF_END15}
        					}
        					do argument_1.addMove(local_6, local_14);
        				}
        			}
        // Unhandled VM instruction: GotoInstruction{label='IF_END2}
        		}
        		if (( local_10 & 7 = static_9)) {
        			let local_8 = 0;
        			while (~(( local_3[local_8] = 0))) {
        				let local_1 = ( local_0 + local_3[local_8]);
        				if (( local_1 & static_0 = 0)) {
        					let local_5 = field_1[local_1];
        					if (~(local_5 = 0)) {
        						let local_13 = local_5.getValue();
        						if (field_5 = static_2) {
        							let local_16 = local_13 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END19}
        						}
        						let local_16 = local_13 < 8;
        						if (local_16) {
        							do argument_1.addMove(( ( static_44 | static_33[local_0]) | static_34[local_1]), ( static_57 | ( static_59[local_13 & 7] - static_58[static_9])));
        						}
        					}
        				}
        				let local_8 = local_8 + 1;
        			}
        // Unhandled VM instruction: GotoInstruction{label='IF_END16}
        		}
        		if (( local_10 & 7 = static_5)) {
        			let local_8 = 0;
        			while (~(( local_3[local_8] = 0))) {
        				let local_1 = ( local_0 + local_3[local_8]);
        				if (( local_1 & static_0 = 0)) {
        					let local_5 = field_1[local_1];
        					if (~(local_5 = 0)) {
        						let local_13 = local_5.getValue();
        						if (field_5 = static_2) {
        							let local_16 = local_13 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END24}
        						}
        						let local_16 = local_13 < 8;
        						if (local_16) {
        							do argument_1.addMove(( ( static_44 | static_33[local_0]) | static_34[local_1]), ( static_57 | ( static_59[local_13 & 7] - static_58[static_5])));
        						}
        					}
        				}
        				let local_8 = local_8 + 1;
        			}
        // Unhandled VM instruction: GotoInstruction{label='IF_END21}
        		}
        		let local_8 = 0;
        		while (~(( local_3[local_8] = 0))) {
        			let local_1 = ( local_0 + local_3[local_8]);
        			let local_17 = 0;
        			while (( ( local_1 & static_0 = 0) & ~(local_17))) {
        				let local_5 = field_1[local_1];
        				if (local_5 = 0) {
        					let local_1 = ( local_1 + local_3[local_8]);
        // Unhandled VM instruction: GotoInstruction{label='IF_END26}
        				}
        				let local_13 = local_5.getValue();
        				if (field_5 = static_2) {
        					let local_16 = local_13 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END27}
        				}
        				let local_16 = local_13 < 8;
        				if (local_16) {
        					do argument_1.addMove(( ( static_44 | static_33[local_0]) | static_34[local_1]), ( static_57 | ( static_59[local_13 & 7] - static_58[local_10 & 7])));
        				}
        				let local_17 = ~(0);
        			}
        			let local_8 = local_8 + 1;
        		}
        	}
        	let local_7 = local_7 + 1;
        }
        return;
    }

    method void genPseudoLegalMoves(int argument_0) {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var Piece local_4;
        var Piece local_5;
        var MoveList local_6;
        var int local_7;
        var int local_8;
        var int local_9;
        var int local_10;
        var int local_11;
        var int local_12;
        var int local_13;
        var int local_14;
        var int local_15;
        var int local_16;
        var int local_17;
        var int local_18;
        var int local_19;
        var int local_20;
        var int local_21;
        var int local_22;
        var int local_23;
        var int local_24;
        var BoardState local_25;
        let local_25 = field_4[0];
        let local_23 = local_25.getEnPassantSq();
        if (field_5 = static_2) {
        	let local_2 = field_2.getPieces();
        	let local_9 = field_2.getCount();
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        let local_2 = field_3.getPieces();
        let local_9 = field_3.getCount();
        do argument_1.resetCount();
        while (local_7 < local_9) {
        	let local_4 = local_2[local_7];
        	if (~(local_4.isDead())) {
        		let local_1 = local_4.getSquare();
        		let local_10 = local_4.getValue();
        		let local_3 = static_51[local_10 & 7];
        		if (( local_10 & 7 = static_4)) {
        			if (field_5 = static_2) {
        				let local_11 = local_1 + 15;
        				let local_12 = local_1 + 17;
        				let local_13 = local_1 + 16;
        				let local_14 = local_1 + 32;
        				let local_19 = local_1 < 32;
        				let local_20 = local_1 > 87;
        // Unhandled VM instruction: GotoInstruction{label='IF_END3}
        			}
        			let local_11 = local_1 - 15;
        			let local_12 = local_1 - 17;
        			let local_13 = local_1 - 16;
        			let local_14 = local_1 - 32;
        			let local_19 = local_1 > 87;
        			let local_20 = local_1 < 32;
        			if (( local_11 & static_0 = 0)) {
        				let local_5 = field_1[local_11];
        				if (local_5 = 0) {
        					if (local_11 = local_23) {
        						do argument_1.addMove(( ( static_43 | static_33[local_1]) | static_34[local_11]), ( static_57 | static_59[static_4]));
        					}
        // Unhandled VM instruction: GotoInstruction{label='IF_END5}
        				}
        				let local_15 = local_5.getValue();
        				if (field_5 = static_2) {
        					let local_21 = local_15 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END7}
        				}
        				let local_21 = local_15 < 8;
        				if (local_21) {
        					let local_6 = ( ( static_44 | static_33[local_1]) | static_34[local_11]);
        					let local_16 = ( static_57 | static_59[local_15 & 7]);
        					if (local_20) {
        						do argument_1.addMove(static_39 | local_6, local_16);
        						do argument_1.addMove(static_40 | local_6, local_16);
        						do argument_1.addMove(static_41 | local_6, local_16);
        						do argument_1.addMove(static_42 | local_6, local_16);
        // Unhandled VM instruction: GotoInstruction{label='IF_END9}
        					}
        					do argument_1.addMove(local_6, local_16);
        				}
        			}
        			if (( local_12 & static_0 = 0)) {
        				let local_5 = field_1[local_12];
        				if (local_5 = 0) {
        					if (local_12 = local_23) {
        						do argument_1.addMove(( ( static_43 | static_33[local_1]) | static_34[local_12]), ( static_57 | static_59[static_4]));
        					}
        // Unhandled VM instruction: GotoInstruction{label='IF_END11}
        				}
        				let local_15 = local_5.getValue();
        				if (field_5 = static_2) {
        					let local_21 = local_15 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END13}
        				}
        				let local_21 = local_15 < 8;
        				if (local_21) {
        					let local_6 = ( ( static_44 | static_33[local_1]) | static_34[local_12]);
        					let local_16 = ( static_57 | static_59[local_15 & 7]);
        					if (local_20) {
        						do argument_1.addMove(static_39 | local_6, local_16);
        						do argument_1.addMove(static_40 | local_6, local_16);
        						do argument_1.addMove(static_41 | local_6, local_16);
        						do argument_1.addMove(static_42 | local_6, local_16);
        // Unhandled VM instruction: GotoInstruction{label='IF_END15}
        					}
        					do argument_1.addMove(local_6, local_16);
        				}
        			}
        			if (( field_1[local_13] = 0)) {
        				let local_6 = ( static_33[local_1] | static_34[local_13]);
        				if (local_20) {
        					do argument_1.addMove(static_39 | local_6, static_56);
        					do argument_1.addMove(static_40 | local_6, 0);
        					do argument_1.addMove(static_41 | local_6, 0);
        					do argument_1.addMove(static_42 | local_6, 0);
        // Unhandled VM instruction: GotoInstruction{label='IF_END17}
        				}
        				do argument_1.addMove(local_6, 0);
        				if (local_19) {
        					if (( field_1[local_14] = 0)) {
        						do argument_1.addMove(( ( static_38 | static_33[local_1]) | static_34[local_14]), 0);
        					}
        				}
        			}
        // Unhandled VM instruction: GotoInstruction{label='IF_END2}
        		}
        		if (( local_10 & 7 = static_9)) {
        			if (~(local_25.getSideToMoveInCheck())) {
        				let local_24 = local_25.getCastlingRights();
        				if (field_5 = static_2) {
        					let local_17 = static_47;
        					let local_18 = static_48;
        // Unhandled VM instruction: GotoInstruction{label='IF_END22}
        				}
        				let local_17 = static_49;
        				let local_18 = static_50;
        				if (( local_24 & local_17 = local_17)) {
        					if (( ( field_1[local_1 + 1] = 0) & ( field_1[local_1 + 2] = 0))) {
        						if (~(isAttacked(local_1 + 1, -(field_5)))) {
        							do argument_1.addMove(( ( static_45 | static_33[local_1]) | static_34[local_1 + 2]), 0);
        						}
        					}
        				}
        				if (( local_24 & local_18 = local_18)) {
        					if (( ( ( field_1[local_1 - 1] = 0) & ( field_1[local_1 - 2] = 0)) & ( field_1[local_1 - 3] = 0))) {
        						if (~(isAttacked(local_1 - 1, -(field_5)))) {
        							do argument_1.addMove(( ( static_46 | static_33[local_1]) | static_34[local_1 - 2]), 0);
        						}
        					}
        				}
        			}
        			let local_8 = 0;
        			while (~(( local_3[local_8] = 0))) {
        				let local_0 = ( local_1 + local_3[local_8]);
        				if (( local_0 & static_0 = 0)) {
        					let local_5 = field_1[local_0];
        					if (local_5 = 0) {
        						do argument_1.addMove(( static_33[local_1] | static_34[local_0]), 0);
        // Unhandled VM instruction: GotoInstruction{label='IF_END30}
        					}
        					let local_15 = local_5.getValue();
        					if (field_5 = static_2) {
        						let local_21 = local_15 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END31}
        					}
        					let local_21 = local_15 < 8;
        					if (local_21) {
        						do argument_1.addMove(( ( static_44 | static_33[local_1]) | static_34[local_0]), ( static_57 | ( static_59[local_15 & 7] - static_58[static_9])));
        					}
        				}
        				let local_8 = local_8 + 1;
        			}
        // Unhandled VM instruction: GotoInstruction{label='IF_END20}
        		}
        		if (( local_10 & 7 = static_5)) {
        			let local_8 = 0;
        			while (~(( local_3[local_8] = 0))) {
        				let local_0 = ( local_1 + local_3[local_8]);
        				if (( local_0 & static_0 = 0)) {
        					let local_5 = field_1[local_0];
        					if (local_5 = 0) {
        						do argument_1.addMove(( static_33[local_1] | static_34[local_0]), 0);
        // Unhandled VM instruction: GotoInstruction{label='IF_END35}
        					}
        					let local_15 = local_5.getValue();
        					if (field_5 = static_2) {
        						let local_21 = local_15 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END36}
        					}
        					let local_21 = local_15 < 8;
        					if (local_21) {
        						do argument_1.addMove(( ( static_44 | static_33[local_1]) | static_34[local_0]), ( static_57 | ( static_59[local_15 & 7] - static_58[static_5])));
        					}
        				}
        				let local_8 = local_8 + 1;
        			}
        // Unhandled VM instruction: GotoInstruction{label='IF_END33}
        		}
        		let local_8 = 0;
        		while (~(( local_3[local_8] = 0))) {
        			let local_0 = ( local_1 + local_3[local_8]);
        			let local_22 = 0;
        			while (( ( local_0 & static_0 = 0) & ~(local_22))) {
        				let local_5 = field_1[local_0];
        				if (local_5 = 0) {
        					do argument_1.addMove(( static_33[local_1] | static_34[local_0]), 0);
        					let local_0 = ( local_0 + local_3[local_8]);
        // Unhandled VM instruction: GotoInstruction{label='IF_END38}
        				}
        				let local_15 = local_5.getValue();
        				if (field_5 = static_2) {
        					let local_21 = local_15 > 8;
        // Unhandled VM instruction: GotoInstruction{label='IF_END39}
        				}
        				let local_21 = local_15 < 8;
        				if (local_21) {
        					do argument_1.addMove(( ( static_44 | static_33[local_1]) | static_34[local_0]), ( static_57 | ( static_59[local_15 & 7] - static_58[local_10 & 7])));
        				}
        				let local_22 = ~(0);
        			}
        			let local_8 = local_8 + 1;
        		}
        	}
        	let local_7 = local_7 + 1;
        }
        return;
    }

    function void initwPawnPieceSquareTable() {
        
        let static_61[16] = 2;
        
        let static_61[17] = 3;
        
        let static_61[18] = 4;
        
        let static_61[19] = 0;
        
        let static_61[20] = 0;
        
        let static_61[21] = 4;
        
        let static_61[22] = 3;
        
        let static_61[23] = 2;
        
        let static_61[32] = 4;
        
        let static_61[33] = 6;
        
        let static_61[34] = 12;
        
        let static_61[35] = 12;
        
        let static_61[36] = 12;
        
        let static_61[37] = 4;
        
        let static_61[38] = 6;
        
        let static_61[39] = 4;
        
        let static_61[48] = 4;
        
        let static_61[49] = 7;
        
        let static_61[50] = 18;
        
        let static_61[51] = 25;
        
        let static_61[52] = 25;
        
        let static_61[53] = 16;
        
        let static_61[54] = 7;
        
        let static_61[55] = 4;
        
        let static_61[64] = 6;
        
        let static_61[65] = 11;
        
        let static_61[66] = 18;
        
        let static_61[67] = 27;
        
        let static_61[68] = 27;
        
        let static_61[69] = 16;
        
        let static_61[70] = 11;
        
        let static_61[71] = 6;
        
        let static_61[80] = 10;
        
        let static_61[81] = 15;
        
        let static_61[82] = 24;
        
        let static_61[83] = 32;
        
        let static_61[84] = 32;
        
        let static_61[85] = 24;
        
        let static_61[86] = 15;
        
        let static_61[87] = 10;
        
        let static_61[96] = 10;
        
        let static_61[97] = 15;
        
        let static_61[98] = 24;
        
        let static_61[99] = 32;
        
        let static_61[100] = 32;
        
        let static_61[101] = 24;
        
        let static_61[102] = 15;
        
        let static_61[103] = 10;
        
        return;
    }

    function void initbPawnPieceSquareTable() {
        
        let static_62[16] = 10;
        
        let static_62[17] = 15;
        
        let static_62[18] = 24;
        
        let static_62[19] = 32;
        
        let static_62[20] = 32;
        
        let static_62[21] = 24;
        
        let static_62[22] = 15;
        
        let static_62[23] = 10;
        
        let static_62[32] = 10;
        
        let static_62[33] = 15;
        
        let static_62[34] = 24;
        
        let static_62[35] = 32;
        
        let static_62[36] = 32;
        
        let static_62[37] = 24;
        
        let static_62[38] = 15;
        
        let static_62[39] = 10;
        
        let static_62[48] = 6;
        
        let static_62[49] = 11;
        
        let static_62[50] = 18;
        
        let static_62[51] = 27;
        
        let static_62[52] = 27;
        
        let static_62[53] = 16;
        
        let static_62[54] = 11;
        
        let static_62[55] = 6;
        
        let static_62[64] = 4;
        
        let static_62[65] = 7;
        
        let static_62[66] = 18;
        
        let static_62[67] = 25;
        
        let static_62[68] = 25;
        
        let static_62[69] = 16;
        
        let static_62[70] = 7;
        
        let static_62[71] = 4;
        
        let static_62[80] = 4;
        
        let static_62[81] = 6;
        
        let static_62[82] = 12;
        
        let static_62[83] = 12;
        
        let static_62[84] = 12;
        
        let static_62[85] = 4;
        
        let static_62[86] = 6;
        
        let static_62[87] = 4;
        
        let static_62[96] = 2;
        
        let static_62[97] = 3;
        
        let static_62[98] = 4;
        
        let static_62[99] = 0;
        
        let static_62[100] = 0;
        
        let static_62[101] = 4;
        
        let static_62[102] = 3;
        
        let static_62[103] = 2;
        
        return;
    }

    function void initwKnightPieceSquareTable() {
        
        let static_63[0] = -(7);
        
        let static_63[1] = -(3);
        
        let static_63[2] = 1;
        
        let static_63[3] = 3;
        
        let static_63[4] = 3;
        
        let static_63[5] = 1;
        
        let static_63[6] = -(3);
        
        let static_63[7] = -(7);
        
        let static_63[16] = 2;
        
        let static_63[17] = 6;
        
        let static_63[18] = 14;
        
        let static_63[19] = 20;
        
        let static_63[20] = 20;
        
        let static_63[21] = 14;
        
        let static_63[22] = 6;
        
        let static_63[23] = 2;
        
        let static_63[32] = 6;
        
        let static_63[33] = 14;
        
        let static_63[34] = 22;
        
        let static_63[35] = 26;
        
        let static_63[36] = 26;
        
        let static_63[37] = 22;
        
        let static_63[38] = 14;
        
        let static_63[39] = 6;
        
        let static_63[48] = 8;
        
        let static_63[49] = 18;
        
        let static_63[50] = 26;
        
        let static_63[51] = 30;
        
        let static_63[52] = 30;
        
        let static_63[53] = 26;
        
        let static_63[54] = 18;
        
        let static_63[55] = 8;
        
        let static_63[64] = 8;
        
        let static_63[65] = 18;
        
        let static_63[66] = 30;
        
        let static_63[67] = 32;
        
        let static_63[68] = 32;
        
        let static_63[69] = 30;
        
        let static_63[70] = 18;
        
        let static_63[71] = 8;
        
        let static_63[80] = 6;
        
        let static_63[81] = 14;
        
        let static_63[82] = 28;
        
        let static_63[83] = 32;
        
        let static_63[84] = 32;
        
        let static_63[85] = 28;
        
        let static_63[86] = 14;
        
        let static_63[87] = 6;
        
        let static_63[96] = 2;
        
        let static_63[97] = 6;
        
        let static_63[98] = 14;
        
        let static_63[99] = 20;
        
        let static_63[100] = 20;
        
        let static_63[101] = 14;
        
        let static_63[102] = 6;
        
        let static_63[103] = 2;
        
        let static_63[112] = -(7);
        
        let static_63[113] = -(3);
        
        let static_63[114] = 1;
        
        let static_63[115] = 3;
        
        let static_63[116] = 3;
        
        let static_63[117] = 1;
        
        let static_63[118] = -(3);
        
        let static_63[119] = -(7);
        
        return;
    }

    function void initbKnightPieceSquareTable() {
        
        let static_64[0] = -(7);
        
        let static_64[1] = -(3);
        
        let static_64[2] = 1;
        
        let static_64[3] = 3;
        
        let static_64[4] = 3;
        
        let static_64[5] = 1;
        
        let static_64[6] = -(3);
        
        let static_64[7] = -(7);
        
        let static_64[16] = 2;
        
        let static_64[17] = 6;
        
        let static_64[18] = 14;
        
        let static_64[19] = 20;
        
        let static_64[20] = 20;
        
        let static_64[21] = 14;
        
        let static_64[22] = 6;
        
        let static_64[23] = 2;
        
        let static_64[32] = 6;
        
        let static_64[33] = 14;
        
        let static_64[34] = 28;
        
        let static_64[35] = 32;
        
        let static_64[36] = 32;
        
        let static_64[37] = 28;
        
        let static_64[38] = 14;
        
        let static_64[39] = 6;
        
        let static_64[48] = 8;
        
        let static_64[49] = 18;
        
        let static_64[50] = 30;
        
        let static_64[51] = 32;
        
        let static_64[52] = 32;
        
        let static_64[53] = 30;
        
        let static_64[54] = 18;
        
        let static_64[55] = 8;
        
        let static_64[64] = 8;
        
        let static_64[65] = 18;
        
        let static_64[66] = 26;
        
        let static_64[67] = 30;
        
        let static_64[68] = 30;
        
        let static_64[69] = 26;
        
        let static_64[70] = 18;
        
        let static_64[71] = 8;
        
        let static_64[80] = 6;
        
        let static_64[81] = 14;
        
        let static_64[82] = 22;
        
        let static_64[83] = 26;
        
        let static_64[84] = 26;
        
        let static_64[85] = 22;
        
        let static_64[86] = 14;
        
        let static_64[87] = 6;
        
        let static_64[96] = 2;
        
        let static_64[97] = 6;
        
        let static_64[98] = 14;
        
        let static_64[99] = 20;
        
        let static_64[100] = 20;
        
        let static_64[101] = 14;
        
        let static_64[102] = 6;
        
        let static_64[103] = 2;
        
        let static_64[112] = -(7);
        
        let static_64[113] = -(3);
        
        let static_64[114] = 1;
        
        let static_64[115] = 3;
        
        let static_64[116] = 3;
        
        let static_64[117] = 1;
        
        let static_64[118] = -(3);
        
        let static_64[119] = -(7);
        
        return;
    }

    function void initwBishopPieceSquareTable() {
        
        let static_65[0] = 16;
        
        let static_65[1] = 16;
        
        let static_65[2] = 16;
        
        let static_65[3] = 16;
        
        let static_65[4] = 16;
        
        let static_65[5] = 16;
        
        let static_65[6] = 16;
        
        let static_65[7] = 16;
        
        let static_65[16] = 26;
        
        let static_65[17] = 29;
        
        let static_65[18] = 31;
        
        let static_65[19] = 31;
        
        let static_65[20] = 31;
        
        let static_65[21] = 31;
        
        let static_65[22] = 29;
        
        let static_65[23] = 26;
        
        let static_65[32] = 26;
        
        let static_65[33] = 28;
        
        let static_65[34] = 32;
        
        let static_65[35] = 32;
        
        let static_65[36] = 32;
        
        let static_65[37] = 32;
        
        let static_65[38] = 28;
        
        let static_65[39] = 26;
        
        let static_65[48] = 16;
        
        let static_65[49] = 26;
        
        let static_65[50] = 32;
        
        let static_65[51] = 32;
        
        let static_65[52] = 32;
        
        let static_65[53] = 32;
        
        let static_65[54] = 26;
        
        let static_65[55] = 16;
        
        let static_65[64] = 16;
        
        let static_65[65] = 26;
        
        let static_65[66] = 32;
        
        let static_65[67] = 32;
        
        let static_65[68] = 32;
        
        let static_65[69] = 32;
        
        let static_65[70] = 26;
        
        let static_65[71] = 16;
        
        let static_65[80] = 16;
        
        let static_65[81] = 28;
        
        let static_65[82] = 32;
        
        let static_65[83] = 32;
        
        let static_65[84] = 32;
        
        let static_65[85] = 32;
        
        let static_65[86] = 28;
        
        let static_65[87] = 16;
        
        let static_65[96] = 16;
        
        let static_65[97] = 29;
        
        let static_65[98] = 31;
        
        let static_65[99] = 31;
        
        let static_65[100] = 31;
        
        let static_65[101] = 31;
        
        let static_65[102] = 29;
        
        let static_65[103] = 16;
        
        let static_65[112] = 16;
        
        let static_65[113] = 16;
        
        let static_65[114] = 16;
        
        let static_65[115] = 16;
        
        let static_65[116] = 16;
        
        let static_65[117] = 16;
        
        let static_65[118] = 16;
        
        let static_65[119] = 16;
        
        return;
    }

    function void initbBishopPieceSquareTable() {
        
        let static_66[0] = 16;
        
        let static_66[1] = 16;
        
        let static_66[2] = 16;
        
        let static_66[3] = 16;
        
        let static_66[4] = 16;
        
        let static_66[5] = 16;
        
        let static_66[6] = 16;
        
        let static_66[7] = 16;
        
        let static_66[16] = 16;
        
        let static_66[17] = 29;
        
        let static_66[18] = 31;
        
        let static_66[19] = 31;
        
        let static_66[20] = 31;
        
        let static_66[21] = 31;
        
        let static_66[22] = 29;
        
        let static_66[23] = 16;
        
        let static_66[32] = 16;
        
        let static_66[33] = 28;
        
        let static_66[34] = 32;
        
        let static_66[35] = 32;
        
        let static_66[36] = 32;
        
        let static_66[37] = 32;
        
        let static_66[38] = 28;
        
        let static_66[39] = 16;
        
        let static_66[48] = 16;
        
        let static_66[49] = 26;
        
        let static_66[50] = 32;
        
        let static_66[51] = 32;
        
        let static_66[52] = 32;
        
        let static_66[53] = 32;
        
        let static_66[54] = 26;
        
        let static_66[55] = 16;
        
        let static_66[64] = 16;
        
        let static_66[65] = 26;
        
        let static_66[66] = 32;
        
        let static_66[67] = 32;
        
        let static_66[68] = 32;
        
        let static_66[69] = 32;
        
        let static_66[70] = 26;
        
        let static_66[71] = 16;
        
        let static_66[80] = 26;
        
        let static_66[81] = 28;
        
        let static_66[82] = 32;
        
        let static_66[83] = 32;
        
        let static_66[84] = 32;
        
        let static_66[85] = 32;
        
        let static_66[86] = 28;
        
        let static_66[87] = 26;
        
        let static_66[96] = 26;
        
        let static_66[97] = 29;
        
        let static_66[98] = 31;
        
        let static_66[99] = 31;
        
        let static_66[100] = 31;
        
        let static_66[101] = 31;
        
        let static_66[102] = 29;
        
        let static_66[103] = 26;
        
        let static_66[112] = 16;
        
        let static_66[113] = 16;
        
        let static_66[114] = 16;
        
        let static_66[115] = 16;
        
        let static_66[116] = 16;
        
        let static_66[117] = 16;
        
        let static_66[118] = 16;
        
        let static_66[119] = 16;
        
        return;
    }

    function void initwRookPieceSquareTable() {
        
        let static_67[0] = 0;
        
        let static_67[1] = 0;
        
        let static_67[2] = 0;
        
        let static_67[3] = 3;
        
        let static_67[4] = 3;
        
        let static_67[5] = 0;
        
        let static_67[6] = 0;
        
        let static_67[7] = 0;
        
        let static_67[16] = -(2);
        
        let static_67[17] = 0;
        
        let static_67[18] = 0;
        
        let static_67[19] = 0;
        
        let static_67[20] = 0;
        
        let static_67[21] = 0;
        
        let static_67[22] = 0;
        
        let static_67[23] = -(2);
        
        let static_67[32] = -(2);
        
        let static_67[33] = 0;
        
        let static_67[34] = 0;
        
        let static_67[35] = 0;
        
        let static_67[36] = 0;
        
        let static_67[37] = 0;
        
        let static_67[38] = 0;
        
        let static_67[39] = -(2);
        
        let static_67[48] = -(2);
        
        let static_67[49] = 0;
        
        let static_67[50] = 0;
        
        let static_67[51] = 0;
        
        let static_67[52] = 0;
        
        let static_67[53] = 0;
        
        let static_67[54] = 0;
        
        let static_67[55] = -(2);
        
        let static_67[64] = -(2);
        
        let static_67[65] = 0;
        
        let static_67[66] = 0;
        
        let static_67[67] = 0;
        
        let static_67[68] = 0;
        
        let static_67[69] = 0;
        
        let static_67[70] = 0;
        
        let static_67[71] = -(2);
        
        let static_67[80] = -(2);
        
        let static_67[81] = 0;
        
        let static_67[82] = 0;
        
        let static_67[83] = 0;
        
        let static_67[84] = 0;
        
        let static_67[85] = 0;
        
        let static_67[86] = 0;
        
        let static_67[87] = -(2);
        
        let static_67[96] = 10;
        
        let static_67[97] = 10;
        
        let static_67[98] = 10;
        
        let static_67[99] = 10;
        
        let static_67[100] = 10;
        
        let static_67[101] = 10;
        
        let static_67[102] = 10;
        
        let static_67[103] = 10;
        
        let static_67[112] = 0;
        
        let static_67[113] = 0;
        
        let static_67[114] = 0;
        
        let static_67[115] = 0;
        
        let static_67[116] = 0;
        
        let static_67[117] = 0;
        
        let static_67[118] = 0;
        
        let static_67[119] = 0;
        
        return;
    }

    function void initbRookPieceSquareTable() {
        
        let static_68[0] = 0;
        
        let static_68[1] = 0;
        
        let static_68[2] = 0;
        
        let static_68[3] = 0;
        
        let static_68[4] = 0;
        
        let static_68[5] = 0;
        
        let static_68[6] = 0;
        
        let static_68[7] = 0;
        
        let static_68[16] = 10;
        
        let static_68[17] = 10;
        
        let static_68[18] = 10;
        
        let static_68[19] = 10;
        
        let static_68[20] = 10;
        
        let static_68[21] = 10;
        
        let static_68[22] = 10;
        
        let static_68[23] = 10;
        
        let static_68[32] = -(2);
        
        let static_68[33] = 0;
        
        let static_68[34] = 0;
        
        let static_68[35] = 0;
        
        let static_68[36] = 0;
        
        let static_68[37] = 0;
        
        let static_68[38] = 0;
        
        let static_68[39] = -(2);
        
        let static_68[48] = -(2);
        
        let static_68[49] = 0;
        
        let static_68[50] = 0;
        
        let static_68[51] = 0;
        
        let static_68[52] = 0;
        
        let static_68[53] = 0;
        
        let static_68[54] = 0;
        
        let static_68[55] = -(2);
        
        let static_68[64] = -(2);
        
        let static_68[65] = 0;
        
        let static_68[66] = 0;
        
        let static_68[67] = 0;
        
        let static_68[68] = 0;
        
        let static_68[69] = 0;
        
        let static_68[70] = 0;
        
        let static_68[71] = -(2);
        
        let static_68[80] = -(2);
        
        let static_68[81] = 0;
        
        let static_68[82] = 0;
        
        let static_68[83] = 0;
        
        let static_68[84] = 0;
        
        let static_68[85] = 0;
        
        let static_68[86] = 0;
        
        let static_68[87] = -(2);
        
        let static_68[96] = -(2);
        
        let static_68[97] = 0;
        
        let static_68[98] = 0;
        
        let static_68[99] = 0;
        
        let static_68[100] = 0;
        
        let static_68[101] = 0;
        
        let static_68[102] = 0;
        
        let static_68[103] = -(2);
        
        let static_68[112] = 0;
        
        let static_68[113] = 0;
        
        let static_68[114] = 0;
        
        let static_68[115] = 3;
        
        let static_68[116] = 3;
        
        let static_68[117] = 0;
        
        let static_68[118] = 0;
        
        let static_68[119] = 0;
        
        return;
    }

    function void initwQueenPieceSquareTable() {
        
        let static_69[0] = -(2);
        
        let static_69[1] = -(2);
        
        let static_69[2] = -(2);
        
        let static_69[3] = 0;
        
        let static_69[4] = 0;
        
        let static_69[5] = -(2);
        
        let static_69[6] = -(2);
        
        let static_69[7] = -(2);
        
        let static_69[16] = 0;
        
        let static_69[17] = 0;
        
        let static_69[18] = 1;
        
        let static_69[19] = 1;
        
        let static_69[20] = 1;
        
        let static_69[21] = 0;
        
        let static_69[22] = 0;
        
        let static_69[23] = 0;
        
        let static_69[32] = 0;
        
        let static_69[33] = 1;
        
        let static_69[34] = 1;
        
        let static_69[35] = 1;
        
        let static_69[36] = 1;
        
        let static_69[37] = 0;
        
        let static_69[38] = 0;
        
        let static_69[39] = 0;
        
        let static_69[48] = 0;
        
        let static_69[49] = 0;
        
        let static_69[50] = 0;
        
        let static_69[51] = 2;
        
        let static_69[52] = 2;
        
        let static_69[53] = 0;
        
        let static_69[54] = 0;
        
        let static_69[55] = 0;
        
        let static_69[64] = 0;
        
        let static_69[65] = 0;
        
        let static_69[66] = 0;
        
        let static_69[67] = 2;
        
        let static_69[68] = 2;
        
        let static_69[69] = 0;
        
        let static_69[70] = 0;
        
        let static_69[71] = 0;
        
        let static_69[80] = -(2);
        
        let static_69[81] = -(2);
        
        let static_69[82] = 0;
        
        let static_69[83] = 0;
        
        let static_69[84] = 0;
        
        let static_69[85] = 0;
        
        let static_69[86] = 0;
        
        let static_69[87] = 0;
        
        let static_69[96] = -(2);
        
        let static_69[97] = -(2);
        
        let static_69[98] = 0;
        
        let static_69[99] = 0;
        
        let static_69[100] = 0;
        
        let static_69[101] = 0;
        
        let static_69[102] = 0;
        
        let static_69[103] = 0;
        
        let static_69[112] = -(2);
        
        let static_69[113] = -(2);
        
        let static_69[114] = 0;
        
        let static_69[115] = 0;
        
        let static_69[116] = 0;
        
        let static_69[117] = 0;
        
        let static_69[118] = 0;
        
        let static_69[119] = 0;
        
        return;
    }

    function void initbQueenPieceSquareTable() {
        
        let static_70[0] = -(2);
        
        let static_70[1] = -(2);
        
        let static_70[2] = 0;
        
        let static_70[3] = 0;
        
        let static_70[4] = 0;
        
        let static_70[5] = 0;
        
        let static_70[6] = 0;
        
        let static_70[7] = 0;
        
        let static_70[16] = -(2);
        
        let static_70[17] = -(2);
        
        let static_70[18] = 0;
        
        let static_70[19] = 0;
        
        let static_70[20] = 0;
        
        let static_70[21] = 0;
        
        let static_70[22] = 0;
        
        let static_70[23] = 0;
        
        let static_70[32] = -(2);
        
        let static_70[33] = -(2);
        
        let static_70[34] = 0;
        
        let static_70[35] = 0;
        
        let static_70[36] = 0;
        
        let static_70[37] = 0;
        
        let static_70[38] = 0;
        
        let static_70[39] = 0;
        
        let static_70[48] = 0;
        
        let static_70[49] = 0;
        
        let static_70[50] = 0;
        
        let static_70[51] = 2;
        
        let static_70[52] = 2;
        
        let static_70[53] = 0;
        
        let static_70[54] = 0;
        
        let static_70[55] = 0;
        
        let static_70[64] = 0;
        
        let static_70[65] = 0;
        
        let static_70[66] = 0;
        
        let static_70[67] = 2;
        
        let static_70[68] = 2;
        
        let static_70[69] = 0;
        
        let static_70[70] = 0;
        
        let static_70[71] = 0;
        
        let static_70[80] = 0;
        
        let static_70[81] = 1;
        
        let static_70[82] = 1;
        
        let static_70[83] = 1;
        
        let static_70[84] = 1;
        
        let static_70[85] = 0;
        
        let static_70[86] = 0;
        
        let static_70[87] = 0;
        
        let static_70[96] = 0;
        
        let static_70[97] = 0;
        
        let static_70[98] = 1;
        
        let static_70[99] = 1;
        
        let static_70[100] = 1;
        
        let static_70[101] = 0;
        
        let static_70[102] = 0;
        
        let static_70[103] = 0;
        
        let static_70[112] = -(2);
        
        let static_70[113] = -(2);
        
        let static_70[114] = -(2);
        
        let static_70[115] = 0;
        
        let static_70[116] = 0;
        
        let static_70[117] = -(2);
        
        let static_70[118] = -(2);
        
        let static_70[119] = -(2);
        
        return;
    }

    function void initwKingPieceSquareTable() {
        
        let static_71[0] = 3;
        
        let static_71[1] = 3;
        
        let static_71[2] = 8;
        
        let static_71[3] = -(12);
        
        let static_71[4] = -(8);
        
        let static_71[5] = -(12);
        
        let static_71[6] = 10;
        
        let static_71[7] = 5;
        
        let static_71[16] = -(5);
        
        let static_71[17] = -(5);
        
        let static_71[18] = -(12);
        
        let static_71[19] = -(12);
        
        let static_71[20] = -(12);
        
        let static_71[21] = -(12);
        
        let static_71[22] = -(5);
        
        let static_71[23] = -(5);
        
        let static_71[32] = -(7);
        
        let static_71[33] = -(15);
        
        let static_71[34] = -(15);
        
        let static_71[35] = -(15);
        
        let static_71[36] = -(15);
        
        let static_71[37] = -(15);
        
        let static_71[38] = -(15);
        
        let static_71[39] = -(7);
        
        let static_71[48] = -(20);
        
        let static_71[49] = -(20);
        
        let static_71[50] = -(20);
        
        let static_71[51] = -(20);
        
        let static_71[52] = -(20);
        
        let static_71[53] = -(20);
        
        let static_71[54] = -(20);
        
        let static_71[55] = -(20);
        
        let static_71[64] = -(20);
        
        let static_71[65] = -(20);
        
        let static_71[66] = -(20);
        
        let static_71[67] = -(20);
        
        let static_71[68] = -(20);
        
        let static_71[69] = -(20);
        
        let static_71[70] = -(20);
        
        let static_71[71] = -(20);
        
        let static_71[80] = -(20);
        
        let static_71[81] = -(20);
        
        let static_71[82] = -(20);
        
        let static_71[83] = -(20);
        
        let static_71[84] = -(20);
        
        let static_71[85] = -(20);
        
        let static_71[86] = -(20);
        
        let static_71[87] = -(20);
        
        let static_71[96] = -(20);
        
        let static_71[97] = -(20);
        
        let static_71[98] = -(20);
        
        let static_71[99] = -(20);
        
        let static_71[100] = -(20);
        
        let static_71[101] = -(20);
        
        let static_71[102] = -(20);
        
        let static_71[103] = -(20);
        
        let static_71[112] = -(20);
        
        let static_71[113] = -(20);
        
        let static_71[114] = -(20);
        
        let static_71[115] = -(20);
        
        let static_71[116] = -(20);
        
        let static_71[117] = -(20);
        
        let static_71[118] = -(20);
        
        let static_71[119] = -(20);
        
        return;
    }

    function void initwKingEndPieceSquareTable() {
        
        let static_73[0] = 0;
        
        let static_73[1] = 0;
        
        let static_73[2] = 1;
        
        let static_73[3] = 2;
        
        let static_73[4] = 2;
        
        let static_73[5] = 1;
        
        let static_73[6] = 0;
        
        let static_73[7] = 0;
        
        let static_73[16] = 0;
        
        let static_73[17] = 2;
        
        let static_73[18] = 4;
        
        let static_73[19] = 5;
        
        let static_73[20] = 5;
        
        let static_73[21] = 4;
        
        let static_73[22] = 2;
        
        let static_73[23] = 0;
        
        let static_73[32] = 1;
        
        let static_73[33] = 4;
        
        let static_73[34] = 6;
        
        let static_73[35] = 7;
        
        let static_73[36] = 7;
        
        let static_73[37] = 6;
        
        let static_73[38] = 4;
        
        let static_73[39] = 1;
        
        let static_73[48] = 1;
        
        let static_73[49] = 4;
        
        let static_73[50] = 10;
        
        let static_73[51] = 10;
        
        let static_73[52] = 10;
        
        let static_73[53] = 10;
        
        let static_73[54] = 4;
        
        let static_73[55] = 1;
        
        let static_73[64] = 1;
        
        let static_73[65] = 4;
        
        let static_73[66] = 12;
        
        let static_73[67] = 15;
        
        let static_73[68] = 15;
        
        let static_73[69] = 12;
        
        let static_73[70] = 4;
        
        let static_73[71] = 1;
        
        let static_73[80] = 0;
        
        let static_73[81] = 7;
        
        let static_73[82] = 10;
        
        let static_73[83] = 12;
        
        let static_73[84] = 12;
        
        let static_73[85] = 10;
        
        let static_73[86] = 7;
        
        let static_73[87] = 0;
        
        let static_73[96] = 0;
        
        let static_73[97] = 2;
        
        let static_73[98] = 4;
        
        let static_73[99] = 5;
        
        let static_73[100] = 5;
        
        let static_73[101] = 4;
        
        let static_73[102] = 2;
        
        let static_73[103] = 0;
        
        let static_73[112] = 0;
        
        let static_73[113] = 0;
        
        let static_73[114] = 0;
        
        let static_73[115] = 0;
        
        let static_73[116] = 0;
        
        let static_73[117] = 0;
        
        let static_73[118] = 0;
        
        let static_73[119] = 0;
        
        return;
    }

    function void initbKingPieceSquareTable() {
        
        let static_72[0] = -(20);
        
        let static_72[1] = -(20);
        
        let static_72[2] = -(20);
        
        let static_72[3] = -(20);
        
        let static_72[4] = -(20);
        
        let static_72[5] = -(20);
        
        let static_72[6] = -(20);
        
        let static_72[7] = -(20);
        
        let static_72[16] = -(20);
        
        let static_72[17] = -(20);
        
        let static_72[18] = -(20);
        
        let static_72[19] = -(20);
        
        let static_72[20] = -(20);
        
        let static_72[21] = -(20);
        
        let static_72[22] = -(20);
        
        let static_72[23] = -(20);
        
        let static_72[32] = -(20);
        
        let static_72[33] = -(20);
        
        let static_72[34] = -(20);
        
        let static_72[35] = -(20);
        
        let static_72[36] = -(20);
        
        let static_72[37] = -(20);
        
        let static_72[38] = -(20);
        
        let static_72[39] = -(20);
        
        let static_72[48] = -(20);
        
        let static_72[49] = -(20);
        
        let static_72[50] = -(20);
        
        let static_72[51] = -(20);
        
        let static_72[52] = -(20);
        
        let static_72[53] = -(20);
        
        let static_72[54] = -(20);
        
        let static_72[55] = -(20);
        
        let static_72[64] = -(20);
        
        let static_72[65] = -(20);
        
        let static_72[66] = -(20);
        
        let static_72[67] = -(20);
        
        let static_72[68] = -(20);
        
        let static_72[69] = -(20);
        
        let static_72[70] = -(20);
        
        let static_72[71] = -(20);
        
        let static_72[80] = -(7);
        
        let static_72[81] = -(15);
        
        let static_72[82] = -(15);
        
        let static_72[83] = -(15);
        
        let static_72[84] = -(15);
        
        let static_72[85] = -(15);
        
        let static_72[86] = -(15);
        
        let static_72[87] = -(7);
        
        let static_72[96] = -(5);
        
        let static_72[97] = -(5);
        
        let static_72[98] = -(12);
        
        let static_72[99] = -(12);
        
        let static_72[100] = -(12);
        
        let static_72[101] = -(12);
        
        let static_72[102] = -(5);
        
        let static_72[103] = -(5);
        
        let static_72[112] = 3;
        
        let static_72[113] = 3;
        
        let static_72[114] = 8;
        
        let static_72[115] = -(12);
        
        let static_72[116] = -(8);
        
        let static_72[117] = -(12);
        
        let static_72[118] = 10;
        
        let static_72[119] = 5;
        
        return;
    }

    function void initbKingEndPieceSquareTable() {
        
        let static_74[0] = 0;
        
        let static_74[1] = 0;
        
        let static_74[2] = 0;
        
        let static_74[3] = 0;
        
        let static_74[4] = 0;
        
        let static_74[5] = 0;
        
        let static_74[6] = 0;
        
        let static_74[7] = 0;
        
        let static_74[16] = 0;
        
        let static_74[17] = 2;
        
        let static_74[18] = 4;
        
        let static_74[19] = 5;
        
        let static_74[20] = 5;
        
        let static_74[21] = 4;
        
        let static_74[22] = 2;
        
        let static_74[23] = 0;
        
        let static_74[32] = 0;
        
        let static_74[33] = 7;
        
        let static_74[34] = 10;
        
        let static_74[35] = 12;
        
        let static_74[36] = 12;
        
        let static_74[37] = 10;
        
        let static_74[38] = 7;
        
        let static_74[39] = 0;
        
        let static_74[48] = 1;
        
        let static_74[49] = 4;
        
        let static_74[50] = 12;
        
        let static_74[51] = 15;
        
        let static_74[52] = 15;
        
        let static_74[53] = 12;
        
        let static_74[54] = 4;
        
        let static_74[55] = 1;
        
        let static_74[64] = 1;
        
        let static_74[65] = 4;
        
        let static_74[66] = 10;
        
        let static_74[67] = 10;
        
        let static_74[68] = 10;
        
        let static_74[69] = 10;
        
        let static_74[70] = 4;
        
        let static_74[71] = 1;
        
        let static_74[80] = 1;
        
        let static_74[81] = 4;
        
        let static_74[82] = 6;
        
        let static_74[83] = 7;
        
        let static_74[84] = 7;
        
        let static_74[85] = 6;
        
        let static_74[86] = 4;
        
        let static_74[87] = 1;
        
        let static_74[96] = 0;
        
        let static_74[97] = 2;
        
        let static_74[98] = 4;
        
        let static_74[99] = 5;
        
        let static_74[100] = 5;
        
        let static_74[101] = 4;
        
        let static_74[102] = 2;
        
        let static_74[103] = 0;
        
        let static_74[112] = 0;
        
        let static_74[113] = 0;
        
        let static_74[114] = 1;
        
        let static_74[115] = 2;
        
        let static_74[116] = 2;
        
        let static_74[117] = 1;
        
        let static_74[118] = 0;
        
        let static_74[119] = 0;
        
        return;
    }

    function void initAttackArray() {
        var int local_0;
        
        while (local_0 < 239) {
        	let static_30[local_0] = static_16;
        	
        	let local_0 = local_0 + 1;
        }
        let static_30[0] = static_21;
        
        let static_30[7] = static_18;
        
        let static_30[14] = static_21;
        
        let static_30[17] = static_21;
        
        let static_30[23] = static_18;
        
        let static_30[29] = static_21;
        
        let static_30[34] = static_21;
        
        let static_30[39] = static_18;
        
        let static_30[44] = static_21;
        
        let static_30[51] = static_21;
        
        let static_30[55] = static_18;
        
        let static_30[59] = static_21;
        
        let static_30[68] = static_21;
        
        let static_30[71] = static_18;
        
        let static_30[74] = static_21;
        
        let static_30[85] = static_21;
        
        let static_30[86] = static_22;
        
        let static_30[87] = static_18;
        
        let static_30[88] = static_22;
        
        let static_30[89] = static_21;
        
        let static_30[101] = static_22;
        
        let static_30[102] = static_20;
        
        let static_30[103] = static_17;
        
        let static_30[104] = static_20;
        
        let static_30[105] = static_22;
        
        let static_30[112] = static_18;
        
        let static_30[113] = static_18;
        
        let static_30[114] = static_18;
        
        let static_30[115] = static_18;
        
        let static_30[116] = static_18;
        
        let static_30[117] = static_18;
        
        let static_30[118] = static_17;
        
        let static_30[120] = static_17;
        
        let static_30[121] = static_18;
        
        let static_30[122] = static_18;
        
        let static_30[123] = static_18;
        
        let static_30[124] = static_18;
        
        let static_30[125] = static_18;
        
        let static_30[126] = static_18;
        
        let static_30[133] = static_22;
        
        let static_30[134] = static_19;
        
        let static_30[135] = static_17;
        
        let static_30[136] = static_19;
        
        let static_30[137] = static_22;
        
        let static_30[149] = static_21;
        
        let static_30[150] = static_22;
        
        let static_30[151] = static_18;
        
        let static_30[152] = static_22;
        
        let static_30[153] = static_21;
        
        let static_30[164] = static_21;
        
        let static_30[167] = static_18;
        
        let static_30[170] = static_21;
        
        let static_30[179] = static_21;
        
        let static_30[183] = static_18;
        
        let static_30[187] = static_21;
        
        let static_30[194] = static_21;
        
        let static_30[199] = static_18;
        
        let static_30[204] = static_21;
        
        let static_30[209] = static_21;
        
        let static_30[215] = static_18;
        
        let static_30[221] = static_21;
        
        let static_30[224] = static_21;
        
        let static_30[231] = static_18;
        
        let static_30[238] = static_21;
        
        return;
    }

    function void initAttackSliderSteps() {
        var int local_0;
        
        while (local_0 < 239) {
        	let static_31[local_0] = 0;
        	
        	let local_0 = local_0 + 1;
        }
        let static_31[0] = -(17);
        
        let static_31[7] = -(16);
        
        let static_31[14] = -(15);
        
        let static_31[17] = -(17);
        
        let static_31[23] = -(16);
        
        let static_31[29] = -(15);
        
        let static_31[34] = -(17);
        
        let static_31[39] = -(16);
        
        let static_31[44] = -(15);
        
        let static_31[51] = -(17);
        
        let static_31[55] = -(16);
        
        let static_31[59] = -(15);
        
        let static_31[68] = -(17);
        
        let static_31[71] = -(16);
        
        let static_31[74] = -(15);
        
        let static_31[85] = -(17);
        
        let static_31[87] = -(16);
        
        let static_31[89] = -(15);
        
        let static_31[102] = -(17);
        
        let static_31[103] = -(16);
        
        let static_31[104] = -(15);
        
        let static_31[112] = -(1);
        
        let static_31[113] = -(1);
        
        let static_31[114] = -(1);
        
        let static_31[115] = -(1);
        
        let static_31[116] = -(1);
        
        let static_31[117] = -(1);
        
        let static_31[118] = -(1);
        
        let static_31[120] = 1;
        
        let static_31[121] = 1;
        
        let static_31[122] = 1;
        
        let static_31[123] = 1;
        
        let static_31[124] = 1;
        
        let static_31[125] = 1;
        
        let static_31[126] = 1;
        
        let static_31[134] = 15;
        
        let static_31[135] = 16;
        
        let static_31[136] = 17;
        
        let static_31[149] = 15;
        
        let static_31[151] = 16;
        
        let static_31[153] = 17;
        
        let static_31[164] = 15;
        
        let static_31[167] = 16;
        
        let static_31[170] = 17;
        
        let static_31[179] = 15;
        
        let static_31[183] = 16;
        
        let static_31[187] = 17;
        
        let static_31[194] = 15;
        
        let static_31[199] = 16;
        
        let static_31[204] = 17;
        
        let static_31[209] = 15;
        
        let static_31[215] = 16;
        
        let static_31[221] = 17;
        
        let static_31[224] = 15;
        
        let static_31[231] = 16;
        
        let static_31[238] = 17;
        
        return;
    }

    function int convertSq120to64(int argument_0) {
        
        return static_34[argument_0];
    }

    function int convertSq64to120(int argument_0) {
        
        return static_35[argument_0];
    }

    method int pieceValFromBoardIndex(int argument_0) {
        var Piece local_0;
        let local_0 = field_1[argument_1];
        return local_0.getValue();
    }

    function void initSqEncoders() {
        var int local_0;
        
        while (local_0 < 8) {
        	let static_33[local_0] = Math.multiply(local_0, 64);
        	
        	let static_34[local_0] = local_0;
        	
        	let local_0 = local_0 + 1;
        }
        let local_0 = 16;
        while (local_0 < 24) {
        	let static_33[local_0] = Math.multiply(local_0 - 8, 64);
        	
        	let static_34[local_0] = local_0 - 8;
        	
        	let local_0 = local_0 + 1;
        }
        let local_0 = 32;
        while (local_0 < 40) {
        	let static_33[local_0] = Math.multiply(local_0 - 16, 64);
        	
        	let static_34[local_0] = local_0 - 16;
        	
        	let local_0 = local_0 + 1;
        }
        let local_0 = 48;
        while (local_0 < 56) {
        	let static_33[local_0] = Math.multiply(local_0 - 24, 64);
        	
        	let static_34[local_0] = local_0 - 24;
        	
        	let local_0 = local_0 + 1;
        }
        let local_0 = 64;
        while (local_0 < 72) {
        	let static_33[local_0] = Math.multiply(local_0 - 32, 64);
        	
        	let static_34[local_0] = local_0 - 32;
        	
        	let local_0 = local_0 + 1;
        }
        let local_0 = 80;
        while (local_0 < 88) {
        	let static_33[local_0] = Math.multiply(local_0 - 40, 64);
        	
        	let static_34[local_0] = local_0 - 40;
        	
        	let local_0 = local_0 + 1;
        }
        let local_0 = 96;
        while (local_0 < 104) {
        	let static_33[local_0] = Math.multiply(local_0 - 48, 64);
        	
        	let static_34[local_0] = local_0 - 48;
        	
        	let local_0 = local_0 + 1;
        }
        let local_0 = 112;
        while (local_0 < 120) {
        	let static_33[local_0] = Math.multiply(local_0 - 56, 64);
        	
        	let static_34[local_0] = local_0 - 56;
        	
        	let local_0 = local_0 + 1;
        }
        return;
    }

    function void initSqDecoder() {
        var int local_0;
        
        while (local_0 < 64) {
        	let static_35[local_0] = ( local_0 + ( local_0 & ~(7)));
        	
        	let local_0 = local_0 + 1;
        }
        return;
    }

}
