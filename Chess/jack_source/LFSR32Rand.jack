class LFSR32Rand {
    field int field_0;
    field int field_1;
    constructor int new() {
        do seed(0, 0);
        return this;
    }

    method void dispose(int argument_0) {
        do Memory.deAlloc(this);
        return;
    }

    method void seed(int argument_0, int argument_1, int argument_2) {
        if (( argument_1 | argument_2 = 0)) {
        	let field_0 = 23294;
        	let field_1 = -(4083);
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        let field_0 = argument_1;
        let field_1 = argument_2;
        return;
    }

    method void randBit(int argument_0) {
        var int local_0;
        if (( field_1 | field_0 = 0)) {
        	do seed(0, 0);
        }
        let local_0 = ( ( ( ( field_1 < 0 + ( field_1 & 64 = 64)) + ( field_0 & 4096 = 4096)) + ( field_0 & 32 = 32)) & 1);
        let field_1 = ( field_1 + field_1 - field_0 < 0);
        let field_0 = ( field_0 + field_0 + local_0);
        return;
    }

    method int randInt(int argument_0) {
        var int local_0;
        while (local_0 < 16) {
        	do randBit();
        	let local_0 = local_0 + 1;
        }
        return field_0;
    }

    method int rand(int argument_0) {
        return ( randInt() & 32767);
    }

    method int randRange(int argument_0, int argument_1, int argument_2) {
        var int local_0;
        var int local_1;
        var int local_2;
        let local_0 = rand();
        let local_1 = argument_2 - argument_1;
        if (local_1 = 32767) {
        	return argument_1 + local_0;
        }
        if (local_1 < 1) {
        	return argument_1;
        }
        let local_1 = Math.divide(32767, local_1 + 1);
        let local_2 = ( argument_1 + Math.divide(local_0, local_1));
        while (( local_0 = 32767 | local_2 > argument_2)) {
        	let local_0 = rand();
        	let local_2 = ( argument_1 + Math.divide(local_0, local_1));
        }
        return local_2;
    }

}
