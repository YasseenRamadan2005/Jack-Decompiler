class MoveList {
    static int static_0;
    static int static_1;
    field Array field_0;
    field Array field_1;
    field int field_2;
    function void init() {
        
        let static_0 = 4096;
        let static_1 = 16384;
        return;
    }

    function void final() {
        
        return;
    }

    constructor MoveList new(int argument_0, int argument_1) {
        let field_0 = Array.new(argument_0);
        if (argument_1) {
        	let field_1 = Array.new(argument_0);
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        }
        let field_1 = 0;
        let field_2 = 0;
        return;
    }

    method void dispose() {
        do field_0.dispose();
        if (~(field_1 = 0)) {
        	do field_1.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    method int getMoves() {
        return field_0;
    }

    method int getCount() {
        return field_2;
    }

    method void resetCount() {
        let field_2 = 0;
        return;
    }

    method void addMove(int argument_0, int argument_1) {
        let field_2[field_0] = argument_1;
        
        let field_2[field_1] = argument_2;
        
        let field_2 = field_2 + 1;
        return;
    }

    method void addMoveIgnoreRank(int argument_0) {
        let field_2[field_0] = argument_1;
        
        let field_2 = field_2 + 1;
        return;
    }

    method void removeMove() {
        let field_2 = field_2 - 1;
        return;
    }

    method void moveBestRankedMoveToPos(int argument_0) {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        let local_1 = argument_1;
        let local_2 = argument_1[field_1];
        let local_0 = argument_1 + 1;
        while (local_0 < field_2) {
        	if (( local_0[field_1] > local_2)) {
        		let local_1 = local_0;
        		let local_2 = local_0[field_1];
        	}
        	let local_0 = local_0 + 1;
        }
        let local_3 = local_1[field_0];
        let local_1[field_1] = argument_1[field_1];
        
        let local_1[field_0] = argument_1[field_0];
        
        let argument_1[field_1] = local_2;
        
        let argument_1[field_0] = local_3;
        
        return;
    }

    method void rankPvMove(int argument_0) {
        var int local_0;
        var int local_1;
        let local_1 = argument_1.getPvMove();
        while (local_0 < field_2) {
        	if (( local_0[field_0] = local_1)) {
        		let local_0[field_1] = ( local_0[field_1] | static_1);
        		
        		return;
        	}
        	let local_0 = local_0 + 1;
        }
        return;
    }

    method void rankKillers(int argument_0) {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        let local_3 = argument_1.getKillerMoves();
        let local_1 = 0[local_3];
        let local_2 = 1[local_3];
        while (local_0 < field_2) {
        	if (( ( local_0[field_0] = local_1) | ( local_0[field_0] = local_2))) {
        		let local_0[field_1] = ( local_0[field_1] | static_0);
        		
        	}
        	let local_0 = local_0 + 1;
        }
        return;
    }

}
