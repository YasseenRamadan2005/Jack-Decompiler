class PieceList {
    field Array field_0;
    field int field_1;
    constructor PieceList new() {
        var int local_0;
        let field_1 = 0;
        let field_0 = Array.new(16);
        while (local_0 < 16) {
        	let local_0[field_0] = Piece.new();
        	
        	let local_0 = local_0 + 1;
        }
        return this;
    }

    method void dispose() {
        var int local_0;
        var Piece local_1;
        while (local_0 < 16) {
        	let local_1 = local_0[field_0];
        	do local_1.dispose();
        	let local_0 = local_0 + 1;
        }
        do field_0.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method int getPieces() {
        return field_0;
    }

    method int getCount() {
        return field_1;
    }

    method void resetCount() {
        let field_1 = 0;
        return;
    }

    method void addPiece(int argument_0, int argument_1) {
        var Piece local_0;
        let local_0 = field_1[field_0];
        do local_0.setValue(argument_1);
        do local_0.setSquare(argument_2);
        do local_0.setDead(0);
        let field_1 = field_1 + 1;
        return;
    }

    method void compress() {
        var int local_0;
        var Piece local_1;
        var int local_2;
        let local_2 = 0;
        while (( local_0 < field_1 & ~(local_2))) {
        	let local_1 = local_0[field_0];
        	if (local_1.isDead()) {
        		let local_2 = ~(0);
        // Unhandled VM instruction: GotoInstruction{label='IF_END0}
        	}
        	let local_0 = local_0 + 1;
        }
        let field_1 = field_1 - 1;
        while (local_0 < field_1) {
        	let local_0[field_0] = local_0[1][field_0];
        	
        	let local_0 = local_0 + 1;
        }
        let field_1[field_0] = local_1;
        
        return;
    }

    method int getKingSquare() {
        var Piece local_0;
        let local_0 = field_1 - 1[field_0];
        return local_0.getSquare();
    }

}
