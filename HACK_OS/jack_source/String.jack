class String {
    field int field_0;
    field Array field_1;
    field int field_2;
    constructor String new(int argument_0) {
        if (argument_0 < 0) {
        	do Sys.error(14);
        }
        if (argument_0 > 0) {
        	let field_1 = Array.new(argument_0);
        }
        let field_0 = argument_0;
        let field_2 = 0;
        return this;
    }

    method void dispose() {
        if (field_0 > 0) {
        	do field_1.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    method int length() {
        return field_2;
    }

    method int charAt(int argument_0) {
        if (( ( argument_1 < 0 | argument_1 > field_2) | argument_1 = field_2)) {
        	do Sys.error(15);
        }
        return argument_1[field_1];
    }

    method int appendChar(int argument_0) {
        if (field_2 = field_0) {
        	do Sys.error(17);
        }
        let field_2[field_1] = argument_1;
        
        let field_2 = field_2 + 1;
        return this;
    }

    method void eraseLastChar() {
        if (field_2 = 0) {
        	do Sys.error(18);
        }
        let field_2 = field_2 - 1;
        return;
    }

    method int intValue() {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        if (field_2 = 0) {
        	return 0;
        }
        let local_3 = ~(0);
        if (( 0[field_1] = 45)) {
        	let local_4 = ~(0);
        	let local_0 = 1;
        }
        while (( local_0 < field_2 & local_3)) {
        	let local_2 = ( local_0[field_1] - 48);
        	let local_3 = ~(( local_2 < 0 | local_2 > 9));
        	if (local_3) {
        		let local_1 = ( Math.multiply(local_1, 10) + local_2);
        		let local_0 = local_0 + 1;
        	}
        }
        if (local_4) {
        	let local_1 = -(local_1);
        }
        return local_1;
    }

    method void setInt(int argument_0) {
        var int local_0;
        var int local_1;
        var Array local_2;
        var int local_3;
        if (field_0 = 0) {
        	do Sys.error(19);
        }
        let local_2 = Array.new(6);
        if (argument_1 < 0) {
        	let local_3 = ~(0);
        	let argument_1 = -(argument_1);
        }
        let local_1 = argument_1;
        while (local_1 > 0) {
        	let local_1 = Math.divide(argument_1, 10);
        	let local_0[local_2] = ( 48 + ( argument_1 - Math.multiply(local_1, 10)));
        	
        	let local_0 = local_0 + 1;
        	let argument_1 = local_1;
        }
        if (local_3) {
        	let local_0[local_2] = 45;
        	
        	let local_0 = local_0 + 1;
        }
        if (field_0 < local_0) {
        	do Sys.error(19);
        }
        if (local_0 = 0) {
        	let 0[field_1] = 48;
        	
        	let field_2 = 1;
        // Unhandled VM instruction: GotoInstruction{label='IF_END4}
        }
        let field_2 = 0;
        while (field_2 < local_0) {
        	let field_2[field_1] = ( local_0 - field_2 + 1)[local_2];
        	
        	let field_2 = field_2 + 1;
        }
        do local_2.dispose();
        return;
    }

    function int newLine() {
        
        return 128;
    }

    function int backSpace() {
        
        return 129;
    }

}
