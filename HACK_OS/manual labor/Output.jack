class Output {
    static int column;
    static int address;
    static boolean inverted;
    static int screenBase;
    static String tempStr;
    static Array charMap;
    static Array shiftedCharMap;

    function void init() {
        let screenBase = 16384;
        let inverted = true;
        let address = 32;
        let column = 0;
        let tempStr = String.new(6);
        do Output.initMap();
        do Output.createShiftedMap();
        return;
    }


    function void initMap() {
        
        let charMap = Array.new(127);
        do Output.create(0, 63, 63, 63, 63, 63, 63, 63, 63, 63, 0, 0);
        do Output.create(32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        do Output.create(33, 12, 30, 30, 30, 12, 12, 0, 12, 12, 0, 0);
        do Output.create(34, 54, 54, 20, 0, 0, 0, 0, 0, 0, 0, 0);
        do Output.create(35, 0, 18, 18, 63, 18, 18, 63, 18, 18, 0, 0);
        do Output.create(36, 12, 30, 51, 3, 30, 48, 51, 30, 12, 12, 0);
        do Output.create(37, 0, 0, 35, 51, 24, 12, 6, 51, 49, 0, 0);
        do Output.create(38, 12, 30, 30, 12, 54, 27, 27, 27, 54, 0, 0);
        do Output.create(39, 12, 12, 6, 0, 0, 0, 0, 0, 0, 0, 0);
        do Output.create(40, 24, 12, 6, 6, 6, 6, 6, 12, 24, 0, 0);
        do Output.create(41, 6, 12, 24, 24, 24, 24, 24, 12, 6, 0, 0);
        do Output.create(42, 0, 0, 0, 51, 30, 63, 30, 51, 0, 0, 0);
        do Output.create(43, 0, 0, 0, 12, 12, 63, 12, 12, 0, 0, 0);
        do Output.create(44, 0, 0, 0, 0, 0, 0, 0, 12, 12, 6, 0);
        do Output.create(45, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0);
        do Output.create(46, 0, 0, 0, 0, 0, 0, 0, 12, 12, 0, 0);
        do Output.create(47, 0, 0, 32, 48, 24, 12, 6, 3, 1, 0, 0);
        do Output.create(48, 12, 30, 51, 51, 51, 51, 51, 30, 12, 0, 0);
        do Output.create(49, 12, 14, 15, 12, 12, 12, 12, 12, 63, 0, 0);
        do Output.create(50, 30, 51, 48, 24, 12, 6, 3, 51, 63, 0, 0);
        do Output.create(51, 30, 51, 48, 48, 28, 48, 48, 51, 30, 0, 0);
        do Output.create(52, 16, 24, 28, 26, 25, 63, 24, 24, 60, 0, 0);
        do Output.create(53, 63, 3, 3, 31, 48, 48, 48, 51, 30, 0, 0);
        do Output.create(54, 28, 6, 3, 3, 31, 51, 51, 51, 30, 0, 0);
        do Output.create(55, 63, 49, 48, 48, 24, 12, 12, 12, 12, 0, 0);
        do Output.create(56, 30, 51, 51, 51, 30, 51, 51, 51, 30, 0, 0);
        do Output.create(57, 30, 51, 51, 51, 62, 48, 48, 24, 14, 0, 0);
        do Output.create(58, 0, 0, 12, 12, 0, 0, 12, 12, 0, 0, 0);
        do Output.create(59, 0, 0, 12, 12, 0, 0, 12, 12, 6, 0, 0);
        do Output.create(60, 0, 0, 24, 12, 6, 3, 6, 12, 24, 0, 0);
        do Output.create(61, 0, 0, 0, 63, 0, 0, 63, 0, 0, 0, 0);
        do Output.create(62, 0, 0, 3, 6, 12, 24, 12, 6, 3, 0, 0);
        do Output.create(64, 30, 51, 51, 59, 59, 59, 27, 3, 30, 0, 0);
        do Output.create(63, 30, 51, 51, 24, 12, 12, 0, 12, 12, 0, 0);
        do Output.create(65, 12, 30, 51, 51, 63, 51, 51, 51, 51, 0, 0);
        do Output.create(66, 31, 51, 51, 51, 31, 51, 51, 51, 31, 0, 0);
        do Output.create(67, 28, 54, 35, 3, 3, 3, 35, 54, 28, 0, 0);
        do Output.create(68, 15, 27, 51, 51, 51, 51, 51, 27, 15, 0, 0);
        do Output.create(69, 63, 51, 35, 11, 15, 11, 35, 51, 63, 0, 0);
        do Output.create(70, 63, 51, 35, 11, 15, 11, 3, 3, 3, 0, 0);
        do Output.create(71, 28, 54, 35, 3, 59, 51, 51, 54, 44, 0, 0);
        do Output.create(72, 51, 51, 51, 51, 63, 51, 51, 51, 51, 0, 0);
        do Output.create(73, 30, 12, 12, 12, 12, 12, 12, 12, 30, 0, 0);
        do Output.create(74, 60, 24, 24, 24, 24, 24, 27, 27, 14, 0, 0);
        do Output.create(75, 51, 51, 51, 27, 15, 27, 51, 51, 51, 0, 0);
        do Output.create(76, 3, 3, 3, 3, 3, 3, 35, 51, 63, 0, 0);
        do Output.create(77, 33, 51, 63, 63, 51, 51, 51, 51, 51, 0, 0);
        do Output.create(78, 51, 51, 55, 55, 63, 59, 59, 51, 51, 0, 0);
        do Output.create(79, 30, 51, 51, 51, 51, 51, 51, 51, 30, 0, 0);
        do Output.create(80, 31, 51, 51, 51, 31, 3, 3, 3, 3, 0, 0);
        do Output.create(81, 30, 51, 51, 51, 51, 51, 63, 59, 30, 48, 0);
        do Output.create(82, 31, 51, 51, 51, 31, 27, 51, 51, 51, 0, 0);
        do Output.create(83, 30, 51, 51, 6, 28, 48, 51, 51, 30, 0, 0);
        do Output.create(84, 63, 63, 45, 12, 12, 12, 12, 12, 30, 0, 0);
        do Output.create(85, 51, 51, 51, 51, 51, 51, 51, 51, 30, 0, 0);
        do Output.create(86, 51, 51, 51, 51, 51, 30, 30, 12, 12, 0, 0);
        do Output.create(87, 51, 51, 51, 51, 51, 63, 63, 63, 18, 0, 0);
        do Output.create(88, 51, 51, 30, 30, 12, 30, 30, 51, 51, 0, 0);
        do Output.create(89, 51, 51, 51, 51, 30, 12, 12, 12, 30, 0, 0);
        do Output.create(90, 63, 51, 49, 24, 12, 6, 35, 51, 63, 0, 0);
        do Output.create(91, 30, 6, 6, 6, 6, 6, 6, 6, 30, 0, 0);
        do Output.create(92, 0, 0, 1, 3, 6, 12, 24, 48, 32, 0, 0);
        do Output.create(93, 30, 24, 24, 24, 24, 24, 24, 24, 30, 0, 0);
        do Output.create(94, 8, 28, 54, 0, 0, 0, 0, 0, 0, 0, 0);
        do Output.create(95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0);
        do Output.create(96, 6, 12, 24, 0, 0, 0, 0, 0, 0, 0, 0);
        do Output.create(97, 0, 0, 0, 14, 24, 30, 27, 27, 54, 0, 0);
        do Output.create(98, 3, 3, 3, 15, 27, 51, 51, 51, 30, 0, 0);
        do Output.create(99, 0, 0, 0, 30, 51, 3, 3, 51, 30, 0, 0);
        do Output.create(100, 48, 48, 48, 60, 54, 51, 51, 51, 30, 0, 0);
        do Output.create(101, 0, 0, 0, 30, 51, 63, 3, 51, 30, 0, 0);
        do Output.create(102, 28, 54, 38, 6, 15, 6, 6, 6, 15, 0, 0);
        do Output.create(103, 0, 0, 30, 51, 51, 51, 62, 48, 51, 30, 0);
        do Output.create(104, 3, 3, 3, 27, 55, 51, 51, 51, 51, 0, 0);
        do Output.create(105, 12, 12, 0, 14, 12, 12, 12, 12, 30, 0, 0);
        do Output.create(106, 48, 48, 0, 56, 48, 48, 48, 48, 51, 30, 0);
        do Output.create(107, 3, 3, 3, 51, 27, 15, 15, 27, 51, 0, 0);
        do Output.create(108, 14, 12, 12, 12, 12, 12, 12, 12, 30, 0, 0);
        do Output.create(109, 0, 0, 0, 29, 63, 43, 43, 43, 43, 0, 0);
        do Output.create(110, 0, 0, 0, 29, 51, 51, 51, 51, 51, 0, 0);
        do Output.create(111, 0, 0, 0, 30, 51, 51, 51, 51, 30, 0, 0);
        do Output.create(112, 0, 0, 0, 30, 51, 51, 51, 31, 3, 3, 0);
        do Output.create(113, 0, 0, 0, 30, 51, 51, 51, 62, 48, 48, 0);
        do Output.create(114, 0, 0, 0, 29, 55, 51, 3, 3, 7, 0, 0);
        do Output.create(115, 0, 0, 0, 30, 51, 6, 24, 51, 30, 0, 0);
        do Output.create(116, 4, 6, 6, 15, 6, 6, 6, 54, 28, 0, 0);
        do Output.create(117, 0, 0, 0, 27, 27, 27, 27, 27, 54, 0, 0);
        do Output.create(118, 0, 0, 0, 51, 51, 51, 51, 30, 12, 0, 0);
        do Output.create(119, 0, 0, 0, 51, 51, 51, 63, 63, 18, 0, 0);
        do Output.create(120, 0, 0, 0, 51, 30, 12, 12, 30, 51, 0, 0);
        do Output.create(121, 0, 0, 0, 51, 51, 51, 62, 48, 24, 15, 0);
        do Output.create(122, 0, 0, 0, 63, 27, 12, 6, 51, 63, 0, 0);
        do Output.create(123, 56, 12, 12, 12, 7, 12, 12, 12, 56, 0, 0);
        do Output.create(124, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 0);
        do Output.create(125, 7, 12, 12, 12, 56, 12, 12, 12, 7, 0, 0);
        do Output.create(126, 38, 45, 25, 0, 0, 0, 0, 0, 0, 0, 0);
        return;
    }
function void create(int c, int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11) {
        var Array bitmap;
        let bitmap = Array.new(11);
        let charMap[c] = bitmap;
        let bitmap[0] = a1;
        let bitmap[1] = a2;
        let bitmap[2] = a3;
        let bitmap[3] = a4;
        let bitmap[4] = a5;
        let bitmap[5] = a6;
        let bitmap[6] = a7;
        let bitmap[7] = a8;
        let bitmap[8] = a9;
        let bitmap[9] = a10;
        let bitmap[10] = a11;
        return;
    }

    function void createShiftedMap() {
        var int i, j;
        var Array source;
        var Array shifted;

        let shiftedCharMap = Array.new(127);
        let i = 0;
        while (i < 127) {
            let source = charMap[i];
            let shifted = Array.new(11);
            let shiftedCharMap[i] = shifted;

            let j = 0;
            while (j < 11) {
                let shifted[j] = Math.multiply(source[j], 256);
                let j = j + 1;
            }

            if (i = 0) {
                let i = 32;
            }
            let i = i + 1;
        }
        return;
    }

    function Array getMap(int c) {
        if (c < 32 | c > 126) {
            let c = 0;
        }
        if (inverted) {
            return charMap[c];
        }
        return shiftedCharMap[c];
    }

    function void drawChar(int c) {
        var int i;
        var int rowAddr;
        var Array glyph;
        var int data;

        let glyph = Output.getMap(c[0]);
        let rowAddr = address;
        let i = 0;

        while (i < 11) {
            if (inverted) {
                let data = screenBase[rowAddr] & (-256);
            } else {
                let data = screenBase[rowAddr] & 255;
            }
            let screenBase[rowAddr] = glyph[i] | data;
            let rowAddr = rowAddr + 32;
            let i = i + 1;
        }
        return;
    }

    function void printChar(int c) {
        if (c = String.newLine()) {
            do Output.println();
        } else {
            if (c = String.backSpace()) {
                do Output.backSpace();
            } else {
                do Output.drawChar(c);
                if (~inverted) {
                    let column = column + 1;
                    let address = address + 1;
                }
                if (column = 32) {
                    do Output.println();
                }
                let inverted = ~inverted;
            }
        }
        return;
    }

    function void printString(String s) {
        var int i, len;
        let len = s.length();
        let i = 0;
        while (i < len) {
            do Output.printChar(s.charAt(i));
            let i = i + 1;
        }
        return;
    }

    function void printInt(int n) {
        do tempStr.setInt(n);
        do Output.printString(tempStr);
        return;
    }

    function void println() {
        let address = address + 352 - column;
        let column = 0;
        let inverted = true;
        if (address = 8128) {
            let address = 32;
        }
        return;
    }

    function void backSpace() {
        if (inverted) {
            if (column > 0) {
                let column = column - 1;
                let address = address - 1;
            } else {
                let column = 31;
                if (address = 32) {
                    let address = 8128;
                }
                let address = address - 321;
            }
            let inverted = false;
        } else {
            let inverted = true;
        }
        do Output.drawChar(32);
        return;
    }
}
