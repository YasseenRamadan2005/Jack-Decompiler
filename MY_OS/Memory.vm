function Memory.init 2
push constant 2048
push constant 7
add
pop local 0
push constant 16384
push local 0
sub
push constant 5
sub
push local 0
push constant 0
add
pop pointer 1
pop that 0
push constant 1
push local 0
push constant 1
add
pop pointer 1
pop that 0
push constant 0
push local 0
push constant 2
add
pop pointer 1
pop that 0
push constant 0
push local 0
push constant 3
add
pop pointer 1
pop that 0
push local 0
call Memory.create_foot 1
pop temp 0
push constant 2048
push constant 6
add
push local 0
call Memory.add_node 2
pop temp 0
push constant 0
return
function Memory.alloc 5
push argument 0
call Memory.getBinIndex 1
pop local 0
push constant 2048
push local 0
add
pop local 1
push local 1
push argument 0
call Memory.get_best_fit 2
pop local 2
label Memory.alloc_WHILE_EXP1
push local 2
push constant 0
eq
not
if-goto Memory.alloc_WHILE_END1
push local 0
push constant 1
add
push constant 7
lt
not
if-goto Memory.alloc$IF_TRUE1
goto Memory.alloc$IF_FALSE1
label Memory.alloc$IF_TRUE1
push constant 0
return
label Memory.alloc$IF_FALSE1
push local 0
push constant 1
add
pop local 0
push constant 2048
push local 0
add
pop local 1
push local 1
push argument 0
call Memory.get_best_fit 2
pop local 2
goto Memory.alloc_WHILE_EXP1
label Memory.alloc_WHILE_END1
push constant 2048
push local 2
push constant 0
add
pop pointer 1
push that 0
call Memory.getBinIndex 1
add
push local 2
call Memory.remove_node 2
pop temp 0
push local 2
push constant 0
add
pop pointer 1
push that 0
push argument 0
sub
pop local 3
push local 3
push constant 5
gt
if-goto Memory.alloc$IF_TRUE2
goto Memory.alloc$IF_FALSE2
label Memory.alloc$IF_TRUE2
push argument 0
push local 2
push constant 0
add
pop pointer 1
pop that 0
push constant 0
push local 2
push constant 1
add
pop pointer 1
pop that 0
push local 2
call Memory.create_foot 1
pop temp 0
push local 2
push argument 0
add
push constant 5
add
pop local 4
push local 3
push constant 5
sub
push local 4
push constant 0
add
pop pointer 1
pop that 0
push constant 1
push local 4
push constant 1
add
pop pointer 1
pop that 0
push local 4
call Memory.create_foot 1
pop temp 0
push constant 2048
push local 3
call Memory.getBinIndex 1
add
push local 4
call Memory.add_node 2
pop temp 0
goto Memory.alloc$IF_END2
label Memory.alloc$IF_FALSE2
push constant 0
push local 2
push constant 1
add
pop pointer 1
pop that 0
push local 2
call Memory.create_foot 1
pop temp 0
label Memory.alloc$IF_END2
push local 2
push constant 4
add
return
function Memory.calloc 1
push argument 0
call Memory.alloc 1
pop local 0
push local 0
not
if-goto Memory.calloc$IF_TRUE1
goto Memory.calloc$IF_FALSE1
label Memory.calloc$IF_TRUE1
push constant 0
return
label Memory.calloc$IF_FALSE1
label Memory.calloc_WHILE_EXP1
push argument 0
push constant 0
gt
not
if-goto Memory.calloc_WHILE_END1
push argument 0
push constant 1
sub
pop argument 0
push constant 0
push local 0
push argument 0
add
pop pointer 1
pop that 0
goto Memory.calloc_WHILE_EXP1
label Memory.calloc_WHILE_END1
push local 0
return
function Memory.deAlloc 3
push argument 0
push constant 4
sub
pop local 0
push constant 1
push local 0
push constant 1
add
pop pointer 1
pop that 0
push local 0
push constant 2
add
pop pointer 1
push that 0
pop local 1
push local 0
push constant 3
add
pop pointer 1
push that 0
pop local 2
push local 1
push constant 0
eq
not
if-goto Memory.deAlloc$IF_TRUE1
goto Memory.deAlloc$IF_FALSE1
label Memory.deAlloc$IF_TRUE1
push local 1
push constant 1
add
pop pointer 1
push that 0
push constant 1
eq
if-goto Memory.deAlloc$IF_TRUE2
goto Memory.deAlloc$IF_FALSE2
label Memory.deAlloc$IF_TRUE2
push constant 2048
push local 1
push constant 0
add
pop pointer 1
push that 0
call Memory.getBinIndex 1
add
push local 1
call Memory.remove_node 2
pop temp 0
push local 1
push constant 0
add
pop pointer 1
push that 0
push local 0
push constant 0
add
pop pointer 1
push that 0
add
push constant 5
add
push local 1
push constant 0
add
pop pointer 1
pop that 0
push local 1
call Memory.create_foot 1
pop temp 0
push local 1
pop local 0
label Memory.deAlloc$IF_FALSE2
label Memory.deAlloc$IF_FALSE1
push local 2
push constant 0
eq
not
if-goto Memory.deAlloc$IF_TRUE3
goto Memory.deAlloc$IF_FALSE3
label Memory.deAlloc$IF_TRUE3
push local 2
push constant 1
add
pop pointer 1
push that 0
push constant 1
eq
if-goto Memory.deAlloc$IF_TRUE4
goto Memory.deAlloc$IF_FALSE4
label Memory.deAlloc$IF_TRUE4
push constant 2048
push local 2
push constant 0
add
pop pointer 1
push that 0
call Memory.getBinIndex 1
add
push local 2
call Memory.remove_node 2
pop temp 0
push local 0
push constant 0
add
pop pointer 1
push that 0
push local 2
push constant 0
add
pop pointer 1
push that 0
add
push constant 5
add
push local 0
push constant 0
add
pop pointer 1
pop that 0
push local 0
call Memory.create_foot 1
pop temp 0
label Memory.deAlloc$IF_FALSE4
label Memory.deAlloc$IF_FALSE3
push constant 2048
push local 0
push constant 0
add
pop pointer 1
push that 0
call Memory.getBinIndex 1
add
push local 0
call Memory.add_node 2
pop temp 0
push constant 0
return
function Memory.realloc 4
push argument 0
push constant 0
eq
if-goto Memory.realloc$IF_TRUE1
goto Memory.realloc$IF_FALSE1
label Memory.realloc$IF_TRUE1
push argument 1
call Memory.alloc 1
return
label Memory.realloc$IF_FALSE1
push argument 0
push constant 1
sub
pop local 3
push local 3
push constant 0
add
pop pointer 1
push that 0
pop local 0
push argument 1
call Memory.alloc 1
pop local 1
push local 1
push constant 0
eq
if-goto Memory.realloc$IF_TRUE2
goto Memory.realloc$IF_FALSE2
label Memory.realloc$IF_TRUE2
push constant 0
return
label Memory.realloc$IF_FALSE2
push local 0
push argument 1
gt
not
if-goto Memory.realloc$IF_TRUE3
goto Memory.realloc$IF_FALSE3
label Memory.realloc$IF_TRUE3
push local 0
pop local 2
goto Memory.realloc$IF_END3
label Memory.realloc$IF_FALSE3
push argument 1
pop local 2
label Memory.realloc$IF_END3
push argument 0
push local 1
push local 2
call Memory.copy 3
pop temp 0
push argument 0
call Memory.deAlloc 1
pop temp 0
push local 1
return
function Memory.copy 1
push constant 0
pop local 0
label Memory.copy_WHILE_EXP1
push local 0
push argument 2
lt
not
if-goto Memory.copy_WHILE_END1
push argument 0
push local 0
add
pop pointer 1
push that 0
push argument 1
push local 0
add
pop pointer 1
pop that 0
push local 0
push constant 1
add
pop local 0
goto Memory.copy_WHILE_EXP1
label Memory.copy_WHILE_END1
push constant 0
return
function Memory.remove_node 0
push argument 1
push constant 2
add
pop pointer 1
push that 0
push constant 0
eq
not
if-goto Memory.remove_node$IF_TRUE1
goto Memory.remove_node$IF_FALSE1
label Memory.remove_node$IF_TRUE1
push argument 1
push constant 3
add
pop pointer 1
push that 0
push argument 1
push constant 2
add
push constant 3
add
pop pointer 1
pop that 0
goto Memory.remove_node$IF_END1
label Memory.remove_node$IF_FALSE1
push argument 1
push constant 3
add
pop pointer 1
push that 0
push argument 0
push constant 0
add
pop pointer 1
pop that 0
label Memory.remove_node$IF_END1
push argument 1
push constant 3
add
pop pointer 1
push that 0
push constant 0
eq
not
if-goto Memory.remove_node$IF_TRUE2
goto Memory.remove_node$IF_FALSE2
label Memory.remove_node$IF_TRUE2
push argument 1
push constant 2
add
pop pointer 1
push that 0
push argument 1
push constant 3
add
push constant 2
add
pop pointer 1
pop that 0
label Memory.remove_node$IF_FALSE2
push constant 0
push argument 1
push constant 2
add
pop pointer 1
pop that 0
push constant 0
push argument 1
push constant 3
add
pop pointer 1
pop that 0
push constant 0
return
function Memory.getBinIndex 1
push constant 0
pop local 0
label Memory.getBinIndex_WHILE_EXP1
push local 0
push constant 7
lt
push constant 2048
push local 0
add
pop pointer 1
push that 0
push constant 0
eq
not
and
not
if-goto Memory.getBinIndex_WHILE_END1
push argument 0
push local 0
push constant 1
add
push constant 16
call Math.multiply 2
gt
not
if-goto Memory.getBinIndex$IF_TRUE1
goto Memory.getBinIndex$IF_FALSE1
label Memory.getBinIndex$IF_TRUE1
push local 0
return
label Memory.getBinIndex$IF_FALSE1
push local 0
push constant 1
add
pop local 0
goto Memory.getBinIndex_WHILE_EXP1
label Memory.getBinIndex_WHILE_END1
push constant 7
push constant 1
sub
return
function Memory.get_best_fit 1
push argument 0
push constant 0
add
pop pointer 1
push that 0
pop local 0
push local 0
push constant 0
add
pop pointer 1
push that 0
push argument 1
lt
not
if-goto Memory.get_best_fit$IF_TRUE1
goto Memory.get_best_fit$IF_FALSE1
label Memory.get_best_fit$IF_TRUE1
push local 0
return
label Memory.get_best_fit$IF_FALSE1
label Memory.get_best_fit_WHILE_EXP1
push local 0
push constant 3
add
pop pointer 1
push that 0
push constant 0
eq
not
not
if-goto Memory.get_best_fit_WHILE_END1
push local 0
push constant 3
add
pop pointer 1
push that 0
pop local 0
push local 0
push constant 0
add
pop pointer 1
push that 0
push argument 1
lt
not
if-goto Memory.get_best_fit$IF_TRUE2
goto Memory.get_best_fit$IF_FALSE2
label Memory.get_best_fit$IF_TRUE2
push local 0
return
label Memory.get_best_fit$IF_FALSE2
goto Memory.get_best_fit_WHILE_EXP1
label Memory.get_best_fit_WHILE_END1
push constant 0
return
function Memory.create_foot 0
push argument 0
push argument 0
push argument 0
push constant 0
add
pop pointer 1
push that 0
push constant 4
add
add
pop pointer 1
pop that 0
push constant 0
return
function Memory.add_node 2
push constant 0
push argument 1
push constant 2
add
pop pointer 1
pop that 0
push constant 0
push argument 1
push constant 3
add
pop pointer 1
pop that 0
push argument 0
push constant 0
add
pop pointer 1
push that 0
push constant 0
eq
if-goto Memory.add_node$IF_TRUE1
goto Memory.add_node$IF_FALSE1
label Memory.add_node$IF_TRUE1
push argument 1
push argument 0
push constant 0
add
pop pointer 1
pop that 0
push constant 0
return
label Memory.add_node$IF_FALSE1
push argument 0
push constant 0
add
pop pointer 1
push that 0
pop local 0
push constant 0
pop local 1
label Memory.add_node_WHILE_EXP1
push local 0
push constant 0
eq
not
push local 0
push constant 0
add
pop pointer 1
push that 0
push argument 1
push constant 0
add
pop pointer 1
push that 0
gt
not
and
not
if-goto Memory.add_node_WHILE_END1
push local 0
pop local 1
push local 0
push constant 3
add
pop pointer 1
push that 0
pop local 0
goto Memory.add_node_WHILE_EXP1
label Memory.add_node_WHILE_END1
push local 1
not
if-goto Memory.add_node$IF_TRUE2
goto Memory.add_node$IF_FALSE2
label Memory.add_node$IF_TRUE2
push argument 0
push constant 0
add
pop pointer 1
push that 0
push argument 1
push constant 3
add
pop pointer 1
pop that 0
push argument 1
push argument 0
push constant 0
add
push constant 2
add
pop pointer 1
pop that 0
push argument 1
push argument 0
push constant 0
add
pop pointer 1
pop that 0
goto Memory.add_node$IF_END2
label Memory.add_node$IF_FALSE2
push local 0
push argument 1
push constant 3
add
pop pointer 1
pop that 0
push local 1
push argument 1
push constant 2
add
pop pointer 1
pop that 0
push local 0
if-goto Memory.add_node$IF_TRUE3
goto Memory.add_node$IF_FALSE3
label Memory.add_node$IF_TRUE3
push argument 1
push local 0
push constant 2
add
pop pointer 1
pop that 0
label Memory.add_node$IF_FALSE3
push argument 1
push local 1
push constant 3
add
pop pointer 1
pop that 0
label Memory.add_node$IF_END2
push constant 0
return
function Memory.poke 0
push argument 1
push argument 0
push constant 0
add
pop pointer 1
pop that 0
push constant 0
return
function Memory.peek 0
push argument 0
push constant 0
add
pop pointer 1
push that 0
return
