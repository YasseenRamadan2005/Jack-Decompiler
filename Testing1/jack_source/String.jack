class String {
    field int field_0;
    field int field_1;
    field int field_2;
    constructor int new(int argument_0) {
        if (~(argument_0 < 0)) {
        	if (~(argument_0 > 0)) {
        		let field_0 = argument_0;
        		let field_2 = 0;
        		return this;
        	} else {
        		let field_1 = Array.new(argument_0);
        	}
        } else {
        	do Sys.error(14);
        }
    }

    method void dispose(int argument_0) {
        if (~(field_0 > 0)) {
        	do Memory.deAlloc(this);
        	return;
        } else {
        	do field_1.dispose();
        }
    }

    method int length(int argument_0) {
        return field_2;
    }

    method int charAt(int argument_0, int argument_1) {
        if (~(( ( argument_1 < 0 | argument_1 > field_2) | argument_1 = field_2))) {
        	argument_1 + field_1
        	return ;
        } else {
        	do Sys.error(15);
        }
    }

    method int appendChar(int argument_0, int argument_1) {
        if (~(field_2 = field_0)) {
        	let field_2[field_1] = argument_1;
        	let  = ;
        	let field_2 = field_2 + 1;
        	return this;
        } else {
        	do Sys.error(17);
        }
    }

    method void eraseLastChar(int argument_0) {
        if (~(field_2 = 0)) {
        	let field_2 = field_2 - 1;
        	return;
        } else {
        	do Sys.error(18);
        }
    }

    method int intValue(int argument_0) {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        var int local_4;
        if (~(field_2 = 0)) {
        	let local_3 = ~(0);
        	0 + field_1
        	if (~( = 45)) {
        	} else {
        		let local_4 = ~(0);
        		let local_0 = 1;
        	}
        } else {
        	return 0;
        }
        while (( local_0 < field_2 & local_3)) {
        	local_0 + field_1
        	let local_2 =  - 48;
        	let local_3 = ~(( local_2 < 0 | local_2 > 9));
        	if (~(local_3)) {
        // Unhandled VM instruction: GotoInstruction
        	} else {
        		let local_1 = ( Math.multiply(local_1, 10) + local_2);
        		let local_0 = local_0 + 1;
        	}
        	while (~(local_4)) {
        // Unhandled VM instruction: GotoInstruction
        		let local_1 = -(local_1);
        	}
        }
    }

    method void setInt(int argument_0, int argument_1) {
        var int local_0;
        var int local_1;
        var int local_2;
        var int local_3;
        if (~(field_0 = 0)) {
        	let local_2 = Array.new(6);
        	if (~(argument_1 < 0)) {
        		let local_1 = argument_1;
        	} else {
        		let local_3 = ~(0);
        		let argument_1 = -(argument_1);
        	}
        } else {
        	do Sys.error(19);
        }
        while (local_1 > 0) {
        	let local_1 = Math.divide(argument_1, 10);
        	let local_0[local_2] = ( 48 + ( argument_1 - Math.multiply(local_1, 10)));
        	let  = ;
        	let local_0 = local_0 + 1;
        	let argument_1 = local_1;
        }
        if (~(local_3)) {
        	if (~(field_0 < local_0)) {
        		if (~(local_0 = 0)) {
        			let field_2 = 0;
        		} else {
        			let 0[field_1] = 48;
        			let  = ;
        			let field_2 = 1;
        // Unhandled VM instruction: GotoInstruction
        		}
        	} else {
        		do Sys.error(19);
        	}
        } else {
        	let local_0[local_2] = 45;
        	let  = ;
        	let local_0 = local_0 + 1;
        }
        while (field_2 < local_0) {
        	field_2 + field_1
        	let ( local_0 - field_2 + 1)[local_2] = ;
        	let  = ;
        	let field_2 = field_2 + 1;
        }
        do local_2.dispose();
        return;
    }

    function int newLine() {
        
        return 128;
    }

    function int backSpace() {
        
        return 129;
    }

}
